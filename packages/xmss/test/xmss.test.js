import { expect } from 'chai';
import { describe } from 'mocha';
import { newQRLDescriptor, newQRLDescriptorFromExtendedSeed } from '../src/classes.js';
import { COMMON, HASH_FUNCTION } from '../src/constants.js';
import { initializeTree } from '../src/xmss.js';

describe('xmss', function testFunction() {
  this.timeout(0);

  describe('initializeTree', () => {
    it('should generate xmss tree for extendedSeed[5, 146 ...] and seed[0, 0 ...]', () => {
      const extendedSeed = new Uint8Array([
        5, 146, 182, 224, 114, 250, 181, 221, 201, 138, 132, 84, 79, 78, 158, 191, 80, 177, 135, 151, 5, 221, 84, 237,
        94, 152, 84, 18, 184, 211, 20, 10, 9, 204, 252, 12, 222, 114, 131, 220, 167, 111, 147, 207, 143, 68, 70, 228,
        217, 106, 73,
      ]);
      const desc = newQRLDescriptorFromExtendedSeed(extendedSeed);
      const seed = new Uint8Array(COMMON.SEED_SIZE);
      const xmssTree = initializeTree(desc, seed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 4,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 237, 163, 19, 201, 85, 145, 160, 35, 165, 179, 127, 54, 28, 7, 165, 117, 58, 146, 211, 208, 66, 116,
        89, 243, 76, 120, 149, 215, 39, 214, 40, 22, 179, 170, 34, 36, 235, 157, 130, 49, 39, 212, 249, 248, 163, 15,
        215, 161, 160, 44, 100, 131, 217, 192, 241, 253, 65, 149, 123, 154, 228, 223, 198, 58, 49, 145, 218, 52, 66,
        104, 98, 130, 179, 213, 22, 15, 37, 207, 22, 42, 81, 127, 210, 19, 31, 131, 251, 242, 105, 138, 88, 249, 196,
        106, 252, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedSeed = new Uint8Array([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 5, signatureType: 0, height: 4, addrFormatType: 9 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 5,
        height: 4,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });

    it('should generate xmss tree for desc[6, 1 ...] and seed[68, 24 ...]', () => {
      const desc = newQRLDescriptor(6, HASH_FUNCTION.SHA2_256, 4, 44);
      const seed = new Uint8Array([
        68, 24, 114, 231, 214, 43, 119, 145, 112, 232, 156, 22, 88, 162, 41, 27, 245, 171, 90, 221, 2, 91, 82, 83, 10,
        140, 73, 25, 113, 67, 166, 224, 57, 194, 244, 60, 252, 197, 168, 250, 3, 128, 62, 174, 226, 90, 16, 101,
      ]);
      const xmssTree = initializeTree(desc, seed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 6,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 154, 124, 42, 121, 37, 91, 246, 4, 244, 198, 21, 251, 28, 4, 35, 72, 186, 212, 16, 58, 65, 10, 71,
        199, 179, 243, 41, 255, 130, 228, 229, 218, 103, 150, 133, 159, 31, 169, 114, 23, 101, 118, 205, 2, 69, 93, 244,
        28, 30, 74, 202, 51, 1, 126, 221, 194, 173, 108, 116, 239, 216, 159, 196, 120, 106, 95, 23, 31, 137, 115, 198,
        67, 170, 158, 112, 141, 174, 87, 118, 59, 86, 3, 163, 2, 61, 136, 190, 250, 192, 228, 240, 46, 122, 190, 56,
        114, 241, 68, 91, 104, 2, 87, 5, 51, 74, 254, 235, 95, 98, 146, 115, 119, 21, 107, 20, 228, 162, 151, 209, 61,
        56, 147, 41, 26, 22, 99, 249, 86,
      ]);
      const expectedSeed = new Uint8Array([
        68, 24, 114, 231, 214, 43, 119, 145, 112, 232, 156, 22, 88, 162, 41, 27, 245, 171, 90, 221, 2, 91, 82, 83, 10,
        140, 73, 25, 113, 67, 166, 224, 57, 194, 244, 60, 252, 197, 168, 250, 3, 128, 62, 174, 226, 90, 16, 101,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          239, 230, 210, 209, 42, 56, 30, 84, 20, 13, 235, 131, 43, 250, 72, 181, 51, 206, 243, 93, 123, 209, 25, 150,
          167, 6, 75, 142, 33, 38, 69, 194, 168, 194, 64, 40, 41, 216, 105, 51, 189, 5, 177, 90, 47, 46, 17, 168, 225,
          100, 222, 132, 0, 254, 23, 189, 32, 155, 99, 230, 40, 174, 161, 61, 189, 66, 37, 25, 168, 161, 24, 169, 120,
          232, 73, 118, 210, 119, 182, 255, 21, 61, 167, 132, 110, 187, 204, 128, 88, 0, 142, 109, 177, 41, 21, 22, 116,
          167, 87, 236, 3, 135, 23, 201, 192, 47, 182, 75, 216, 10, 165, 42, 44, 96, 199, 228, 40, 144, 7, 4, 224, 78,
          85, 41, 25, 213, 69, 203, 32, 67, 177, 179, 152, 233, 144, 81, 151, 158, 22, 14, 152, 69, 93, 46, 96, 32, 20,
          80, 4, 98, 52, 23, 248, 240, 39, 216, 237, 76, 155, 242, 217, 19, 226, 29, 84, 199, 189, 167, 119, 213, 26,
          119, 168, 146, 145, 136, 136, 115, 144, 15, 21, 161, 135, 214, 35, 91, 91, 64, 21, 14, 185, 124,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              212, 34, 252, 232, 11, 222, 231, 173, 225, 184, 171, 42, 182, 23, 71, 49, 140, 167, 65, 38, 202, 170, 88,
              205, 157, 237, 252, 218, 243, 92, 100, 244,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              40, 173, 199, 139, 180, 235, 36, 89, 148, 254, 204, 128, 204, 42, 128, 68, 184, 191, 249, 71, 193, 228,
              96, 251, 96, 141, 46, 252, 208, 145, 20, 47,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              255, 187, 140, 215, 114, 144, 244, 141, 243, 154, 33, 43, 124, 6, 241, 31, 230, 139, 82, 85, 92, 170, 235,
              19, 68, 194, 205, 197, 158, 31, 199, 126,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              131, 172, 174, 116, 50, 39, 27, 197, 141, 247, 196, 1, 120, 143, 186, 98, 25, 15, 171, 69, 250, 107, 104,
              207, 103, 68, 250, 83, 241, 30, 194, 189,
            ]),
          },
        ],
        retain: new Uint8Array([
          255, 61, 112, 94, 197, 238, 148, 207, 238, 93, 203, 33, 33, 198, 132, 37, 9, 23, 44, 23, 183, 0, 51, 57, 196,
          172, 42, 240, 237, 183, 242, 131,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 0, signatureType: 4, height: 6, addrFormatType: 44 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 0,
        height: 6,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });

    it('should generate xmss tree for desc[10, 2 ...] and seed[112, 104 ...]', () => {
      const desc = newQRLDescriptor(10, HASH_FUNCTION.SHAKE_256, 7, 13);
      const seed = new Uint8Array([
        112, 104, 137, 192, 105, 171, 35, 223, 91, 12, 173, 112, 183, 118, 223, 141, 63, 16, 125, 67, 71, 76, 28, 116,
        25, 53, 100, 29, 214, 232, 245, 214, 150, 86, 22, 197, 20, 54, 96, 252, 21, 40, 57, 42, 8, 71, 0, 35,
      ]);
      const xmssTree = initializeTree(desc, seed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 10,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 39, 135, 83, 241, 136, 93, 226, 7, 200, 120, 210, 139, 188, 172, 34, 191, 3, 66, 54, 212, 158, 222,
        210, 47, 185, 192, 215, 33, 206, 194, 220, 133, 248, 236, 222, 241, 118, 149, 173, 127, 12, 70, 59, 162, 209,
        16, 67, 178, 44, 70, 42, 5, 32, 155, 87, 62, 229, 243, 29, 249, 194, 203, 149, 232, 119, 221, 48, 105, 254, 149,
        240, 2, 209, 189, 121, 124, 213, 82, 179, 75, 127, 116, 166, 212, 101, 174, 36, 158, 198, 146, 110, 121, 163,
        169, 89, 247, 62, 22, 224, 63, 54, 243, 198, 235, 221, 233, 135, 116, 129, 144, 250, 78, 51, 178, 143, 224, 227,
        45, 249, 97, 217, 13, 237, 89, 237, 215, 128, 127,
      ]);
      const expectedSeed = new Uint8Array([
        112, 104, 137, 192, 105, 171, 35, 223, 91, 12, 173, 112, 183, 118, 223, 141, 63, 16, 125, 67, 71, 76, 28, 116,
        25, 53, 100, 29, 214, 232, 245, 214, 150, 86, 22, 197, 20, 54, 96, 252, 21, 40, 57, 42, 8, 71, 0, 35,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          41, 80, 220, 130, 200, 3, 187, 20, 8, 211, 98, 221, 135, 61, 220, 224, 182, 184, 109, 57, 25, 80, 159, 215,
          173, 69, 209, 251, 115, 14, 23, 172, 223, 215, 81, 242, 128, 87, 6, 131, 248, 212, 200, 188, 195, 36, 6, 173,
          0, 53, 33, 114, 117, 198, 181, 160, 85, 67, 29, 152, 170, 0, 108, 167, 225, 147, 58, 161, 22, 11, 69, 141, 76,
          203, 142, 48, 176, 47, 130, 71, 95, 166, 94, 221, 68, 233, 60, 196, 109, 131, 3, 119, 39, 172, 147, 75, 194,
          238, 231, 11, 233, 63, 91, 156, 106, 72, 121, 206, 65, 204, 36, 37, 145, 255, 140, 164, 70, 65, 89, 119, 8,
          125, 99, 159, 51, 158, 228, 116, 153, 192, 6, 62, 243, 177, 92, 28, 59, 247, 191, 250, 221, 15, 29, 41, 49,
          167, 38, 85, 162, 31, 13, 207, 184, 190, 227, 221, 112, 181, 143, 161, 208, 246, 73, 205, 205, 185, 115, 209,
          138, 105, 56, 93, 68, 183, 23, 188, 50, 200, 78, 210, 73, 215, 60, 86, 120, 89, 13, 64, 52, 189, 35, 48, 193,
          216, 189, 177, 93, 49, 147, 179, 167, 11, 223, 40, 144, 48, 223, 74, 206, 61, 131, 68, 212, 68, 80, 69, 83,
          213, 67, 244, 159, 230, 226, 184, 101, 214, 75, 10, 96, 30, 179, 31, 50, 116, 163, 176, 58, 165, 73, 148, 207,
          73, 180, 115, 16, 234, 248, 172, 238, 113, 9, 202, 117, 96, 154, 13, 27, 241, 218, 194, 127, 243, 243, 171,
          109, 14, 225, 249, 46, 140, 77, 144, 183, 244, 132, 90, 119, 114, 2, 185, 32, 79, 240, 116, 1, 44, 170, 224,
          156, 150, 183, 190, 25, 132, 190, 66, 145, 125, 189, 211, 128, 120, 246, 220, 120, 51, 54, 23, 129, 78, 184,
          226, 112, 54, 187, 219, 218, 183, 228, 227,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              138, 180, 144, 111, 215, 200, 34, 101, 204, 252, 168, 93, 222, 173, 232, 122, 135, 132, 128, 191, 235, 42,
              65, 87, 69, 12, 141, 55, 15, 212, 127, 251,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              54, 85, 11, 179, 236, 72, 88, 165, 85, 48, 194, 250, 167, 170, 174, 183, 245, 33, 121, 123, 76, 56, 76,
              66, 62, 197, 48, 7, 76, 182, 193, 45,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              79, 174, 147, 214, 121, 205, 179, 115, 130, 217, 52, 216, 106, 20, 252, 57, 104, 25, 38, 126, 109, 159,
              95, 110, 67, 144, 96, 241, 62, 72, 147, 99,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              125, 215, 182, 50, 200, 203, 235, 194, 80, 61, 248, 188, 184, 31, 242, 140, 54, 73, 123, 114, 19, 207, 44,
              58, 206, 203, 97, 66, 77, 233, 87, 153,
            ]),
          },
          {
            h: 4,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              188, 70, 56, 170, 197, 170, 100, 25, 198, 47, 138, 203, 88, 157, 227, 79, 58, 221, 252, 47, 116, 58, 186,
              63, 71, 168, 48, 158, 40, 74, 120, 246,
            ]),
          },
          {
            h: 5,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              29, 174, 213, 191, 76, 166, 189, 78, 124, 99, 175, 182, 2, 97, 180, 101, 251, 241, 121, 0, 91, 78, 128,
              205, 202, 97, 215, 19, 88, 29, 222, 241,
            ]),
          },
          {
            h: 6,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              106, 80, 57, 115, 62, 29, 22, 213, 167, 2, 196, 102, 97, 109, 138, 199, 11, 243, 125, 151, 201, 128, 38,
              55, 234, 130, 174, 207, 77, 35, 219, 93,
            ]),
          },
          {
            h: 7,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              202, 110, 220, 51, 199, 211, 17, 131, 65, 253, 180, 164, 243, 76, 197, 6, 46, 52, 178, 194, 160, 8, 98, 6,
              70, 131, 45, 153, 51, 106, 231, 118,
            ]),
          },
        ],
        retain: new Uint8Array([
          55, 56, 230, 69, 249, 176, 209, 23, 75, 94, 43, 16, 39, 89, 27, 230, 200, 47, 254, 239, 134, 142, 56, 232, 71,
          199, 70, 173, 246, 139, 44, 160,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 2, signatureType: 7, height: 10, addrFormatType: 13 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 2,
        height: 10,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });
  });
});
