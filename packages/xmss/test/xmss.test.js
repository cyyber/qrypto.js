import { expect } from 'chai';
import { describe } from 'mocha';
import {
  newBDSState,
  newQRLDescriptor,
  newQRLDescriptorFromExtendedSeed,
  newWOTSParams,
  newXMSSParams,
} from '../src/classes.js';
import { COMMON, HASH_FUNCTION } from '../src/constants.js';
import {
  calcBaseW,
  calculateSignatureBaseSize,
  getSignatureSize,
  getXMSSAddressFromPK,
  hMsg,
  initializeTree,
  newXMSS,
  newXMSSFromExtendedSeed,
  newXMSSFromHeight,
  newXMSSFromSeed,
  wotsSign,
  xmssFastSignMessage,
} from '../src/xmss.js';

describe('xmss', function testFunction() {
  this.timeout(0);

  describe('calculateSignatureBaseSize', () => {
    it('should return the signature base size for the keysize 65', () => {
      const [keySize] = new Uint32Array([65]);
      const signautreBaseSize = calculateSignatureBaseSize(keySize);
      const expectedSignatureBaseSize = 101;

      expect(signautreBaseSize).to.equal(expectedSignatureBaseSize);
    });

    it('should return the signature base size for the keysize 399', () => {
      const [keySize] = new Uint32Array([399]);
      const signautreBaseSize = calculateSignatureBaseSize(keySize);
      const expectedSignatureBaseSize = 435;

      expect(signautreBaseSize).to.equal(expectedSignatureBaseSize);
    });

    it('should return the signature base size for the keysize 1064', () => {
      const [keySize] = new Uint32Array([1064]);
      const signautreBaseSize = calculateSignatureBaseSize(keySize);
      const expectedSignatureBaseSize = 1100;

      expect(signautreBaseSize).to.equal(expectedSignatureBaseSize);
    });
  });

  describe('getSignatureSize', () => {
    it('should return the signature size for the n[2] h[4] w[6] k[8]', () => {
      const n = 2;
      const h = 4;
      const w = 6;
      const k = 8;
      const params = newXMSSParams(n, h, w, k);
      const signatureSize = getSignatureSize(params);
      const expectedSignatureSize = 186;

      expect(signatureSize).to.equal(expectedSignatureSize);
    });

    it('should return the signature size for the n[13] h[7] w[9] k[3]', () => {
      const n = 13;
      const h = 7;
      const w = 9;
      const k = 3;
      const params = newXMSSParams(n, h, w, k);
      const signatureSize = getSignatureSize(params);
      const expectedSignatureSize = 741;

      expect(signatureSize).to.equal(expectedSignatureSize);
    });

    it('should return the signature size for the n[25] h[13] w[12] k[9]', () => {
      const n = 25;
      const h = 13;
      const w = 12;
      const k = 9;
      const params = newXMSSParams(n, h, w, k);
      const signatureSize = getSignatureSize(params);
      const expectedSignatureSize = 2202;

      expect(signatureSize).to.equal(expectedSignatureSize);
    });
  });

  describe('hMsg', () => {
    it('should return an error if key length is not equal to 3 times n', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const out = new Uint8Array([34, 56, 2, 7, 8, 45]);
      const input = new Uint8Array([32, 45, 7, 8, 23, 5, 7]);
      const key = new Uint8Array([34, 56, 2, 7, 8, 45, 34, 56, 2, 2]);
      const n = 3;
      const error = hMsg(hashFunction, out, input, key, n);

      expect(error).to.deep.equal({
        error: `H_msg takes 3n-bit keys, we got n=${n} but a keylength of ${key.length}.`,
      });
    });

    it('should return an null error if the function is executed correctly', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const out = new Uint8Array([34, 56, 2, 7, 8, 45]);
      const input = new Uint8Array([32, 45, 7, 8, 23, 5, 7]);
      const key = new Uint8Array([34, 56, 2, 7, 8, 45, 34, 56, 2]);
      const n = 3;
      const error = hMsg(hashFunction, out, input, key, n);

      expect(error).to.deep.equal({
        error: null,
      });
    });
  });

  describe('calcBaseW', () => {
    it('should calculate the base w, with w[6] input[74, 74, ...]', () => {
      const n = 13;
      const w = 6;
      const wotsParams = newWOTSParams(n, w);
      const outputLen = wotsParams.len1;
      const output = new Uint8Array(wotsParams.len);
      const input = new Uint8Array([
        74, 74, 32, 16, 12, 189, 110, 39, 169, 21, 184, 111, 59, 158, 132, 251, 205, 225, 89, 45, 117, 81, 92, 143, 82,
        170, 238, 156, 75,
      ]);
      const expectedWotsParams = newWOTSParams(n, w);
      const expectedOutputLen = expectedWotsParams.len1;
      const expectedOutput = new Uint8Array([
        1, 4, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 1, 4, 0, 1, 5, 5, 1, 4, 1, 4, 0, 0, 1, 5, 0, 0, 0, 1, 0,
        1, 5, 5, 0, 1, 4, 0, 1, 4, 1, 5, 0, 1, 4, 1, 0, 0, 0, 0, 0,
      ]);
      const expectedInput = new Uint8Array([
        74, 74, 32, 16, 12, 189, 110, 39, 169, 21, 184, 111, 59, 158, 132, 251, 205, 225, 89, 45, 117, 81, 92, 143, 82,
        170, 238, 156, 75,
      ]);
      calcBaseW(output, outputLen, input, wotsParams);

      expect(wotsParams).to.deep.equal(expectedWotsParams);
      expect(outputLen).to.deep.equal(expectedOutputLen);
      expect(output).to.deep.equal(expectedOutput);
      expect(input).to.deep.equal(expectedInput);
    });

    it('should calculate the base w, with w[16] input[34, 23, ...]', () => {
      const n = 25;
      const w = 16;
      const wotsParams = newWOTSParams(n, w);
      const outputLen = wotsParams.len1;
      const output = new Uint8Array(wotsParams.len);
      const input = new Uint8Array([
        34, 23, 66, 23, 4, 7, 8, 23, 34, 23, 66, 23, 4, 7, 8, 23, 34, 23, 66, 23, 4, 7, 8, 23, 34, 23, 66, 23, 4, 7, 8,
        23, 34,
      ]);
      const expectedWotsParams = newWOTSParams(n, w);
      const expectedOutputLen = expectedWotsParams.len1;
      const expectedOutput = new Uint8Array([
        2, 2, 1, 7, 4, 2, 1, 7, 0, 4, 0, 7, 0, 8, 1, 7, 2, 2, 1, 7, 4, 2, 1, 7, 0, 4, 0, 7, 0, 8, 1, 7, 2, 2, 1, 7, 4,
        2, 1, 7, 0, 4, 0, 7, 0, 8, 1, 7, 2, 2, 0, 0, 0,
      ]);
      const expectedInput = new Uint8Array([
        34, 23, 66, 23, 4, 7, 8, 23, 34, 23, 66, 23, 4, 7, 8, 23, 34, 23, 66, 23, 4, 7, 8, 23, 34, 23, 66, 23, 4, 7, 8,
        23, 34,
      ]);
      calcBaseW(output, outputLen, input, wotsParams);

      expect(wotsParams).to.deep.equal(expectedWotsParams);
      expect(outputLen).to.deep.equal(expectedOutputLen);
      expect(output).to.deep.equal(expectedOutput);
      expect(input).to.deep.equal(expectedInput);
    });

    it('should calculate the base w, with w[256] input[159, 202, ...]', () => {
      const n = 11;
      const w = 256;
      const wotsParams = newWOTSParams(n, w);
      const outputLen = wotsParams.len1;
      const output = new Uint8Array(wotsParams.len);
      const input = new Uint8Array([
        159, 202, 211, 84, 72, 119, 20, 240, 87, 221, 150, 241, 19, 50, 16, 16, 212, 61, 35, 204, 89, 163, 228, 212, 10,
        173, 44, 146, 41, 95, 131, 72,
      ]);
      const expectedWotsParams = newWOTSParams(n, w);
      const expectedOutputLen = expectedWotsParams.len1;
      const expectedOutput = new Uint8Array([159, 202, 211, 84, 72, 119, 20, 240, 87, 221, 150, 0, 0]);
      const expectedInput = new Uint8Array([
        159, 202, 211, 84, 72, 119, 20, 240, 87, 221, 150, 241, 19, 50, 16, 16, 212, 61, 35, 204, 89, 163, 228, 212, 10,
        173, 44, 146, 41, 95, 131, 72,
      ]);
      calcBaseW(output, outputLen, input, wotsParams);

      expect(wotsParams).to.deep.equal(expectedWotsParams);
      expect(outputLen).to.deep.equal(expectedOutputLen);
      expect(output).to.deep.equal(expectedOutput);
      expect(input).to.deep.equal(expectedInput);
    });
  });

  describe('wotsSign', () => {
    it('should throw an error if the size of addr is invalid', () => {
      const hashFunction = HASH_FUNCTION.SHA2_256;
      const sig = new Uint8Array([
        224, 201, 246, 138, 163, 4, 236, 101, 149, 141, 198, 200, 52, 152, 221, 51, 7, 165, 205, 23, 66, 130, 153, 139,
        158, 164, 149, 241,
      ]);
      const msg = new Uint8Array([
        139, 172, 150, 45, 231, 244, 232, 178, 87, 66, 68, 153, 193, 43, 143, 159, 174, 252, 98, 12, 196, 221, 107, 122,
        97, 174,
      ]);
      const sk = new Uint8Array([
        68, 172, 140, 141, 41, 40, 252, 44, 118, 197, 181, 104, 53, 95, 217, 186, 119, 36, 131, 206, 57,
      ]);
      const n = 2;
      const w = 16;
      const params = newWOTSParams(n, w);
      const pubSeed = new Uint8Array([
        232, 10, 209, 120, 126, 242, 118, 253, 164, 208, 15, 70, 40, 111, 142, 239, 154, 123, 96, 189, 176, 202, 3, 213,
        148, 237, 38, 241, 149, 238, 21, 26, 10,
      ]);
      const addr = new Uint32Array([136, 63, 214, 113, 214, 45, 225]);

      expect(() => wotsSign(hashFunction, sig, msg, sk, params, pubSeed, addr)).to.throw(
        'addr should be an array of size 8'
      );
    });

    it('should sign wots, with SHA2_256 n[2] w[16]', () => {
      const hashFunction = HASH_FUNCTION.SHA2_256;
      const sig = new Uint8Array([
        224, 201, 246, 138, 163, 4, 236, 101, 149, 141, 198, 200, 52, 152, 221, 51, 7, 165, 205, 23, 66, 130, 153, 139,
        158, 164, 149, 241,
      ]);
      const msg = new Uint8Array([
        139, 172, 150, 45, 231, 244, 232, 178, 87, 66, 68, 153, 193, 43, 143, 159, 174, 252, 98, 12, 196, 221, 107, 122,
        97, 174,
      ]);
      const sk = new Uint8Array([
        68, 172, 140, 141, 41, 40, 252, 44, 118, 197, 181, 104, 53, 95, 217, 186, 119, 36, 131, 206, 57,
      ]);
      const n = 2;
      const w = 16;
      const params = newWOTSParams(n, w);
      const pubSeed = new Uint8Array([
        232, 10, 209, 120, 126, 242, 118, 253, 164, 208, 15, 70, 40, 111, 142, 239, 154, 123, 96, 189, 176, 202, 3, 213,
        148, 237, 38, 241, 149, 238, 21, 26, 10,
      ]);
      const addr = new Uint32Array([136, 243, 63, 214, 113, 214, 45, 225]);
      const expectedSig = new Uint8Array([
        66, 143, 173, 51, 39, 251, 23, 249, 135, 223, 37, 136, 52, 152, 221, 51, 7, 165, 205, 23, 66, 130, 153, 139,
        158, 164, 149, 241,
      ]);
      const expectedMsg = new Uint8Array([
        139, 172, 150, 45, 231, 244, 232, 178, 87, 66, 68, 153, 193, 43, 143, 159, 174, 252, 98, 12, 196, 221, 107, 122,
        97, 174,
      ]);
      const expectedSk = new Uint8Array([
        68, 172, 140, 141, 41, 40, 252, 44, 118, 197, 181, 104, 53, 95, 217, 186, 119, 36, 131, 206, 57,
      ]);
      const expectedParams = newWOTSParams(n, w);
      const expectedPubSeed = new Uint8Array([
        232, 10, 209, 120, 126, 242, 118, 253, 164, 208, 15, 70, 40, 111, 142, 239, 154, 123, 96, 189, 176, 202, 3, 213,
        148, 237, 38, 241, 149, 238, 21, 26, 10,
      ]);
      const expectedAddr = new Uint32Array([136, 243, 63, 214, 113, 5, 11, 1]);
      wotsSign(hashFunction, sig, msg, sk, params, pubSeed, addr);

      expect(sig).to.deep.equal(expectedSig);
      expect(msg).to.deep.equal(expectedMsg);
      expect(sk).to.deep.equal(expectedSk);
      expect(params).to.deep.equal(expectedParams);
      expect(pubSeed).to.deep.equal(expectedPubSeed);
      expect(addr).to.deep.equal(expectedAddr);
    });

    it('should sign wots, with SHAKE_128 n[2] w[6]', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const sig = new Uint8Array([
        8, 8, 2, 13, 4, 14, 0, 5, 5, 7, 11, 12, 2, 11, 10, 11, 14, 0, 4, 11, 13, 2, 8, 7, 12, 9, 122, 26, 49, 178, 15,
        72, 228,
      ]);
      const msg = new Uint8Array([
        178, 104, 176, 20, 253, 235, 214, 9, 122, 26, 49, 178, 15, 72, 228, 226, 9, 56, 105, 40, 93, 189, 155, 23, 2,
      ]);
      const sk = new Uint8Array([
        114, 54, 69, 150, 127, 24, 154, 74, 203, 198, 101, 138, 26, 233, 160, 137, 224, 2, 108, 75, 141, 166, 239, 172,
      ]);
      const n = 2;
      const w = 6;
      const params = newWOTSParams(n, w);
      const pubSeed = new Uint8Array([
        217, 43, 195, 228, 235, 132, 239, 100, 186, 210, 252, 23, 0, 47, 179, 206, 150, 115, 99, 49, 26, 187, 128, 134,
        101, 110, 246, 77, 32, 69, 224, 166, 171, 130,
      ]);
      const addr = new Uint32Array([253, 215, 207, 144, 64, 155, 102, 31]);
      const expectedSig = new Uint8Array([
        230, 213, 215, 44, 58, 144, 232, 247, 57, 34, 134, 197, 101, 141, 171, 217, 43, 14, 100, 242, 118, 92, 8, 7, 12,
        9, 122, 26, 49, 178, 15, 72, 228,
      ]);
      const expectedMsg = new Uint8Array([
        178, 104, 176, 20, 253, 235, 214, 9, 122, 26, 49, 178, 15, 72, 228, 226, 9, 56, 105, 40, 93, 189, 155, 23, 2,
      ]);
      const expectedSk = new Uint8Array([
        114, 54, 69, 150, 127, 24, 154, 74, 203, 198, 101, 138, 26, 233, 160, 137, 224, 2, 108, 75, 141, 166, 239, 172,
      ]);
      const expectedParams = newWOTSParams(n, w);
      const expectedPubSeed = new Uint8Array([
        217, 43, 195, 228, 235, 132, 239, 100, 186, 210, 252, 23, 0, 47, 179, 206, 150, 115, 99, 49, 26, 187, 128, 134,
        101, 110, 246, 77, 32, 69, 224, 166, 171, 130,
      ]);
      const expectedAddr = new Uint32Array([253, 215, 207, 144, 64, 10, 3, 1]);
      wotsSign(hashFunction, sig, msg, sk, params, pubSeed, addr);

      expect(sig).to.deep.equal(expectedSig);
      expect(msg).to.deep.equal(expectedMsg);
      expect(sk).to.deep.equal(expectedSk);
      expect(params).to.deep.equal(expectedParams);
      expect(pubSeed).to.deep.equal(expectedPubSeed);
      expect(addr).to.deep.equal(expectedAddr);
    });

    it('should sign wots, with SHAKE_256 n[3] w[256]', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_256;
      const sig = new Uint8Array([
        94, 41, 14, 122, 27, 26, 103, 13, 225, 153, 164, 236, 149, 75, 253, 59, 114, 172, 163, 230, 161, 149, 76, 9,
        231, 240, 141,
      ]);
      const msg = new Uint8Array([
        34, 122, 83, 18, 112, 92, 216, 101, 49, 184, 37, 119, 62, 113, 223, 50, 162, 74, 67, 23, 245, 103, 184, 130, 27,
        156, 153, 196, 32, 48, 65, 130, 207, 64, 226,
      ]);
      const sk = new Uint8Array([
        11, 198, 107, 59, 33, 178, 149, 21, 29, 158, 31, 154, 251, 220, 67, 213, 31, 29, 140, 184, 122, 89, 240, 132,
        129, 182, 118, 140, 155, 59,
      ]);
      const n = 3;
      const w = 256;
      const params = newWOTSParams(n, w);
      const pubSeed = new Uint8Array([
        240, 169, 165, 69, 9, 20, 6, 63, 132, 84, 168, 26, 76, 63, 61, 220, 204, 240, 41, 252, 197, 225, 7, 246, 185,
      ]);
      const addr = new Uint32Array([13, 215, 66, 106, 98, 55, 105, 183]);
      const expectedSig = new Uint8Array([
        163, 210, 143, 216, 97, 38, 11, 67, 245, 99, 82, 239, 15, 209, 230, 59, 114, 172, 163, 230, 161, 149, 76, 9,
        231, 240, 141,
      ]);
      const expectedMsg = new Uint8Array([
        34, 122, 83, 18, 112, 92, 216, 101, 49, 184, 37, 119, 62, 113, 223, 50, 162, 74, 67, 23, 245, 103, 184, 130, 27,
        156, 153, 196, 32, 48, 65, 130, 207, 64, 226,
      ]);
      const expectedSk = new Uint8Array([
        11, 198, 107, 59, 33, 178, 149, 21, 29, 158, 31, 154, 251, 220, 67, 213, 31, 29, 140, 184, 122, 89, 240, 132,
        129, 182, 118, 140, 155, 59,
      ]);
      const expectedParams = newWOTSParams(n, w);
      const expectedPubSeed = new Uint8Array([
        240, 169, 165, 69, 9, 20, 6, 63, 132, 84, 168, 26, 76, 63, 61, 220, 204, 240, 41, 252, 197, 225, 7, 246, 185,
      ]);
      const expectedAddr = new Uint32Array([13, 215, 66, 106, 98, 4, 13, 1]);
      wotsSign(hashFunction, sig, msg, sk, params, pubSeed, addr);

      expect(sig).to.deep.equal(expectedSig);
      expect(msg).to.deep.equal(expectedMsg);
      expect(sk).to.deep.equal(expectedSk);
      expect(params).to.deep.equal(expectedParams);
      expect(pubSeed).to.deep.equal(expectedPubSeed);
      expect(addr).to.deep.equal(expectedAddr);
    });
  });

  describe('xmssFastSignMessage', () => {
    it('should return sigMsg after signing the message, with message[116, 62, ...]', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const n = 32;
      const height = 4;
      const w = 16;
      const k = 2;
      const params = newXMSSParams(n, height, w, k);
      const sk = new Uint8Array([
        175, 164, 62, 237, 79, 76, 8, 86, 43, 180, 106, 168, 95, 139, 122, 187, 198, 147, 211, 215, 139, 152, 26, 170,
        124, 222, 30, 42, 136, 1, 177, 153, 145, 26, 229, 135, 116, 182, 40, 166, 129, 230, 53, 42, 210, 79, 66, 218,
        222, 26, 58, 44, 244, 220, 164, 90, 214, 131, 7, 17, 231, 238, 185, 162, 41, 75, 71, 184, 172, 55, 195, 48, 219,
        75, 71, 25, 58, 152, 69, 18, 137, 121, 180, 35, 242, 222, 64, 217, 55, 62, 116, 214, 184, 58, 157, 212, 245,
        198, 103, 246, 146, 99, 60, 2, 48, 175, 123, 32, 39, 168, 210, 10, 187, 230, 36, 172, 231, 2, 235, 28, 191, 8,
        61, 146, 243, 14, 80, 250, 216, 159, 43, 45,
      ]);
      const bdsState = newBDSState(height, n, k);
      const message = new Uint8Array([
        116, 62, 21, 79, 2, 108, 85, 248, 89, 228, 92, 147, 122, 86, 174, 18, 183, 241, 242, 48, 164, 250, 62, 149, 2,
        205, 141, 174, 129, 176, 155, 0,
      ]);
      const expectedParams = newXMSSParams(n, height, w, k);
      const expectedSk = new Uint8Array([
        175, 164, 62, 238, 79, 76, 8, 86, 43, 180, 106, 168, 95, 139, 122, 187, 198, 147, 211, 215, 139, 152, 26, 170,
        124, 222, 30, 42, 136, 1, 177, 153, 145, 26, 229, 135, 116, 182, 40, 166, 129, 230, 53, 42, 210, 79, 66, 218,
        222, 26, 58, 44, 244, 220, 164, 90, 214, 131, 7, 17, 231, 238, 185, 162, 41, 75, 71, 184, 172, 55, 195, 48, 219,
        75, 71, 25, 58, 152, 69, 18, 137, 121, 180, 35, 242, 222, 64, 217, 55, 62, 116, 214, 184, 58, 157, 212, 245,
        198, 103, 246, 146, 99, 60, 2, 48, 175, 123, 32, 39, 168, 210, 10, 187, 230, 36, 172, 231, 2, 235, 28, 191, 8,
        61, 146, 243, 14, 80, 250, 216, 159, 43, 45,
      ]);
      const expectedBdsState = {
        auth: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackLevels: new Uint8Array([0, 0, 0, 0, 0]),
        stackOffset: 0,
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 0,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 0,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
      };
      const expectedMessage = new Uint8Array([
        116, 62, 21, 79, 2, 108, 85, 248, 89, 228, 92, 147, 122, 86, 174, 18, 183, 241, 242, 48, 164, 250, 62, 149, 2,
        205, 141, 174, 129, 176, 155, 0,
      ]);
      const expectedSigMsg = new Uint8Array([
        175, 164, 62, 237, 56, 53, 95, 198, 208, 224, 108, 72, 195, 200, 38, 113, 176, 192, 17, 54, 207, 152, 169, 101,
        217, 216, 19, 193, 110, 53, 162, 154, 2, 242, 57, 54, 158, 0, 253, 214, 74, 10, 20, 248, 233, 89, 29, 140, 84,
        66, 97, 162, 0, 68, 85, 61, 128, 201, 56, 77, 152, 206, 90, 104, 218, 255, 108, 85, 161, 29, 27, 26, 133, 151,
        252, 65, 216, 96, 248, 185, 106, 119, 12, 74, 221, 242, 104, 69, 170, 212, 73, 83, 40, 147, 112, 171, 139, 123,
        199, 195, 43, 209, 111, 106, 204, 176, 251, 23, 21, 187, 132, 198, 207, 53, 193, 13, 67, 138, 47, 81, 245, 182,
        145, 128, 153, 207, 249, 199, 50, 86, 187, 239, 21, 219, 178, 41, 254, 108, 190, 138, 25, 47, 56, 123, 180, 203,
        213, 117, 88, 36, 23, 127, 255, 157, 60, 22, 164, 147, 249, 158, 59, 46, 171, 93, 16, 178, 183, 93, 213, 238,
        165, 210, 137, 66, 121, 16, 99, 58, 209, 98, 95, 195, 219, 193, 165, 26, 114, 60, 92, 254, 132, 136, 238, 144,
        151, 100, 173, 169, 240, 117, 57, 112, 46, 61, 207, 215, 46, 125, 43, 74, 252, 234, 27, 253, 202, 60, 249, 61,
        17, 231, 185, 254, 236, 73, 187, 230, 85, 204, 24, 19, 9, 167, 131, 113, 15, 18, 216, 200, 73, 35, 112, 223,
        204, 12, 191, 110, 140, 152, 190, 67, 64, 199, 209, 181, 40, 212, 120, 37, 62, 176, 19, 73, 120, 140, 138, 111,
        247, 36, 41, 39, 84, 76, 104, 63, 13, 136, 59, 227, 194, 53, 3, 70, 96, 119, 183, 168, 3, 48, 82, 159, 65, 108,
        176, 162, 116, 246, 54, 190, 69, 85, 191, 201, 19, 223, 236, 115, 36, 238, 149, 223, 174, 34, 185, 68, 71, 162,
        45, 158, 154, 152, 210, 195, 186, 29, 11, 151, 74, 88, 132, 112, 124, 178, 57, 34, 112, 100, 85, 21, 215, 194,
        207, 240, 41, 191, 70, 206, 205, 93, 90, 129, 151, 133, 83, 217, 61, 53, 254, 112, 162, 247, 161, 67, 49, 104,
        102, 88, 18, 47, 227, 173, 187, 64, 85, 141, 140, 206, 228, 154, 83, 72, 81, 103, 237, 22, 54, 60, 133, 109,
        219, 113, 194, 138, 152, 147, 236, 167, 180, 30, 11, 225, 121, 242, 238, 135, 77, 120, 215, 205, 49, 180, 134,
        80, 224, 223, 63, 75, 61, 7, 35, 164, 142, 170, 47, 123, 92, 119, 24, 17, 174, 8, 150, 145, 100, 203, 227, 29,
        123, 250, 211, 12, 180, 161, 198, 159, 104, 125, 50, 67, 173, 242, 239, 253, 254, 129, 85, 211, 15, 104, 138,
        206, 111, 196, 86, 211, 238, 233, 12, 87, 40, 163, 106, 49, 207, 96, 25, 140, 125, 24, 127, 248, 245, 92, 32,
        90, 233, 1, 85, 58, 211, 35, 67, 71, 205, 182, 92, 113, 45, 252, 234, 142, 118, 36, 29, 125, 123, 135, 160, 213,
        60, 220, 10, 38, 160, 162, 246, 81, 130, 182, 178, 137, 236, 27, 16, 61, 207, 29, 160, 88, 154, 163, 134, 165,
        9, 121, 4, 118, 27, 196, 93, 220, 182, 45, 79, 112, 244, 223, 23, 228, 165, 8, 73, 153, 209, 47, 210, 16, 211,
        166, 201, 247, 190, 51, 95, 54, 250, 111, 131, 202, 52, 111, 96, 184, 27, 162, 102, 176, 74, 12, 31, 149, 164,
        24, 192, 173, 174, 34, 69, 81, 61, 154, 225, 55, 115, 255, 242, 252, 131, 67, 6, 159, 189, 27, 207, 220, 46, 87,
        120, 168, 31, 47, 14, 170, 252, 150, 187, 149, 132, 198, 68, 169, 249, 169, 86, 71, 209, 97, 198, 35, 133, 246,
        38, 35, 100, 250, 130, 82, 85, 123, 117, 161, 87, 36, 26, 216, 90, 138, 255, 37, 85, 186, 118, 0, 71, 252, 247,
        52, 91, 9, 188, 3, 71, 122, 187, 149, 47, 124, 166, 135, 49, 135, 196, 102, 63, 36, 220, 213, 77, 151, 58, 227,
        49, 222, 17, 136, 244, 22, 190, 230, 47, 41, 147, 137, 195, 140, 184, 223, 46, 146, 136, 47, 21, 59, 129, 44,
        96, 123, 184, 27, 244, 216, 180, 206, 5, 77, 138, 39, 113, 98, 146, 39, 17, 68, 85, 150, 39, 119, 242, 98, 137,
        184, 250, 142, 60, 56, 248, 0, 194, 108, 184, 94, 86, 5, 225, 112, 44, 160, 169, 128, 58, 89, 65, 97, 60, 150,
        5, 28, 120, 17, 154, 79, 188, 185, 84, 248, 230, 58, 82, 69, 72, 219, 237, 20, 127, 24, 86, 118, 23, 113, 46,
        208, 178, 121, 88, 175, 126, 203, 27, 44, 254, 16, 82, 118, 82, 93, 235, 115, 205, 138, 185, 178, 4, 58, 208,
        200, 74, 222, 133, 187, 112, 101, 243, 185, 189, 193, 48, 9, 187, 122, 224, 120, 235, 133, 170, 205, 208, 22, 6,
        62, 239, 52, 104, 125, 242, 177, 27, 89, 229, 152, 135, 0, 84, 54, 141, 164, 253, 97, 239, 224, 122, 70, 247,
        124, 75, 140, 53, 248, 146, 140, 133, 128, 201, 153, 137, 99, 254, 4, 105, 144, 158, 144, 171, 220, 101, 71, 9,
        87, 154, 234, 238, 6, 135, 225, 201, 150, 71, 250, 173, 91, 132, 81, 56, 222, 154, 169, 238, 233, 143, 32, 88,
        227, 58, 91, 53, 27, 226, 199, 183, 140, 38, 103, 230, 214, 215, 40, 237, 1, 113, 154, 74, 64, 29, 213, 169, 99,
        251, 223, 173, 80, 166, 248, 11, 209, 77, 133, 171, 183, 127, 13, 212, 75, 114, 143, 240, 115, 156, 35, 233, 33,
        34, 134, 231, 188, 95, 245, 97, 9, 101, 166, 187, 23, 103, 255, 144, 99, 74, 141, 247, 78, 77, 228, 220, 14,
        103, 122, 14, 241, 109, 253, 198, 73, 112, 207, 253, 177, 184, 62, 121, 45, 102, 29, 71, 131, 80, 67, 125, 27,
        53, 125, 139, 160, 21, 134, 105, 205, 253, 172, 246, 128, 169, 137, 192, 103, 77, 200, 70, 187, 79, 18, 132,
        215, 128, 30, 149, 182, 11, 24, 1, 209, 15, 156, 131, 0, 244, 179, 159, 134, 237, 78, 237, 195, 113, 60, 122,
        233, 117, 237, 65, 27, 34, 0, 234, 107, 186, 53, 126, 209, 234, 16, 152, 254, 155, 20, 71, 107, 66, 208, 222,
        248, 91, 147, 38, 99, 134, 162, 6, 13, 70, 190, 114, 71, 136, 34, 168, 21, 50, 144, 233, 68, 185, 43, 175, 176,
        246, 177, 204, 200, 97, 37, 18, 141, 95, 38, 186, 110, 238, 14, 254, 186, 111, 132, 41, 14, 242, 222, 136, 159,
        51, 20, 223, 231, 208, 41, 163, 139, 62, 138, 165, 47, 81, 123, 253, 134, 90, 66, 100, 83, 63, 192, 188, 97, 56,
        212, 11, 73, 28, 196, 176, 200, 175, 179, 216, 109, 29, 28, 0, 100, 216, 118, 118, 13, 215, 93, 231, 82, 247,
        153, 120, 127, 122, 205, 242, 3, 100, 224, 11, 151, 4, 252, 242, 72, 210, 238, 217, 107, 119, 227, 118, 13, 213,
        33, 30, 174, 137, 170, 154, 57, 142, 165, 74, 133, 176, 104, 40, 56, 121, 74, 197, 167, 164, 213, 0, 194, 9,
        246, 73, 19, 23, 123, 15, 233, 153, 71, 192, 39, 10, 153, 173, 48, 18, 235, 33, 179, 21, 24, 89, 167, 222, 168,
        241, 107, 36, 4, 53, 142, 60, 73, 113, 172, 133, 131, 238, 103, 78, 92, 51, 105, 126, 242, 220, 233, 54, 117,
        232, 160, 48, 234, 70, 126, 168, 98, 62, 150, 186, 104, 151, 240, 59, 16, 97, 233, 199, 138, 158, 69, 27, 199,
        95, 29, 121, 162, 98, 90, 38, 91, 245, 247, 43, 126, 73, 59, 88, 178, 237, 50, 190, 25, 186, 31, 240, 145, 176,
        110, 84, 32, 88, 35, 161, 34, 112, 201, 58, 192, 154, 109, 138, 233, 106, 19, 246, 237, 87, 139, 16, 100, 65,
        85, 118, 224, 245, 219, 154, 58, 228, 95, 116, 34, 3, 163, 131, 253, 7, 93, 4, 102, 196, 160, 165, 135, 57, 211,
        180, 31, 158, 90, 126, 187, 107, 9, 0, 151, 196, 186, 247, 207, 158, 198, 2, 4, 197, 166, 100, 112, 21, 218,
        140, 156, 75, 112, 114, 51, 73, 228, 202, 249, 148, 105, 175, 122, 61, 173, 198, 17, 156, 250, 155, 162, 232,
        108, 148, 111, 211, 139, 8, 56, 182, 170, 110, 60, 44, 144, 60, 85, 223, 44, 54, 36, 97, 25, 118, 120, 218, 149,
        32, 160, 10, 107, 228, 247, 57, 214, 213, 142, 220, 148, 211, 96, 233, 164, 116, 159, 203, 66, 204, 118, 120, 4,
        121, 68, 159, 33, 160, 160, 184, 64, 204, 144, 69, 220, 128, 207, 65, 208, 13, 205, 184, 214, 121, 32, 206, 196,
        81, 186, 42, 0, 143, 137, 150, 207, 237, 210, 37, 249, 73, 246, 35, 51, 75, 207, 81, 39, 144, 137, 208, 241,
        113, 7, 134, 224, 219, 231, 92, 121, 255, 23, 195, 233, 80, 134, 114, 51, 4, 109, 238, 150, 7, 129, 199, 206,
        53, 232, 225, 195, 139, 136, 107, 98, 39, 216, 238, 217, 144, 62, 15, 226, 17, 197, 240, 126, 3, 12, 157, 27,
        193, 87, 119, 234, 162, 102, 237, 2, 241, 112, 204, 153, 16, 187, 232, 71, 153, 9, 237, 238, 76, 142, 166, 47,
        112, 208, 62, 50, 68, 71, 208, 204, 212, 74, 180, 101, 40, 145, 84, 226, 1, 40, 151, 219, 70, 195, 7, 246, 73,
        15, 58, 89, 233, 27, 0, 137, 6, 19, 93, 107, 23, 105, 173, 15, 60, 119, 170, 228, 167, 19, 79, 131, 206, 15,
        202, 96, 87, 202, 142, 151, 101, 197, 120, 142, 164, 0, 85, 155, 164, 207, 143, 165, 231, 188, 169, 7, 244, 190,
        233, 82, 183, 90, 175, 85, 3, 160, 20, 116, 186, 210, 192, 61, 204, 139, 239, 25, 144, 99, 168, 147, 182, 218,
        249, 211, 84, 222, 146, 85, 111, 222, 35, 246, 152, 103, 217, 184, 87, 62, 43, 116, 106, 156, 224, 105, 24, 137,
        189, 26, 94, 156, 220, 72, 114, 33, 22, 30, 171, 76, 87, 186, 189, 36, 176, 38, 125, 219, 189, 51, 171, 30, 31,
        188, 116, 56, 218, 39, 3, 141, 114, 171, 70, 176, 132, 178, 24, 101, 187, 121, 181, 120, 145, 191, 64, 75, 221,
        62, 44, 213, 30, 98, 158, 58, 160, 120, 182, 24, 38, 46, 105, 116, 225, 44, 18, 55, 117, 221, 111, 222, 154, 12,
        115, 150, 105, 144, 46, 244, 164, 171, 70, 95, 216, 21, 161, 14, 244, 153, 139, 173, 33, 250, 243, 37, 203, 191,
        50, 43, 255, 31, 237, 174, 76, 3, 248, 184, 217, 43, 172, 232, 210, 166, 116, 6, 146, 167, 106, 3, 148, 30, 153,
        85, 12, 130, 201, 80, 24, 194, 180, 57, 209, 145, 54, 2, 48, 165, 100, 70, 114, 114, 228, 4, 16, 193, 235, 12,
        1, 2, 208, 126, 110, 110, 166, 226, 14, 134, 43, 31, 18, 227, 136, 145, 208, 35, 45, 233, 56, 154, 72, 98, 32,
        230, 180, 66, 186, 254, 85, 89, 27, 54, 203, 246, 97, 75, 162, 145, 250, 23, 183, 224, 245, 254, 119, 251, 74,
        81, 176, 11, 77, 226, 217, 190, 52, 179, 62, 90, 226, 128, 254, 126, 180, 40, 215, 163, 143, 110, 58, 246, 199,
        74, 35, 252, 194, 24, 226, 159, 49, 16, 152, 227, 93, 91, 131, 133, 203, 38, 26, 25, 181, 189, 226, 39, 185,
        148, 56, 103, 169, 103, 35, 107, 75, 115, 118, 231, 143, 157, 254, 61, 92, 86, 24, 178, 140, 16, 18, 193, 68,
        161, 188, 7, 150, 80, 164, 253, 45, 130, 174, 37, 206, 242, 89, 77, 48, 99, 210, 197, 95, 223, 80, 170, 142,
        100, 247, 200, 5, 5, 58, 39, 158, 22, 135, 162, 124, 51, 141, 90, 223, 30, 56, 9, 40, 37, 203, 10, 252, 155,
        151, 144, 111, 70, 99, 185, 52, 180, 252, 175, 151, 49, 201, 215, 249, 113, 165, 199, 117, 147, 194, 67, 150,
        184, 246, 0, 152, 196, 87, 116, 235, 78, 61, 194, 84, 251, 157, 188, 202, 121, 35, 5, 152, 222, 239, 53, 109,
        126, 239, 66, 101, 175, 152, 134, 192, 206, 143, 219, 109, 141, 126, 208, 228, 194, 151, 251, 118, 210, 218,
        130, 177, 226, 117, 93, 163, 190, 218, 12, 164, 200, 127, 162, 118, 226, 14, 221, 160, 72, 232, 93, 46, 164, 46,
        207, 192, 197, 169, 195, 114, 74, 92, 13, 78, 85, 187, 68, 14, 148, 37, 133, 120, 109, 15, 84, 250, 35, 44, 182,
        54, 174, 114, 116, 162, 94, 143, 97, 39, 46, 162, 112, 232, 217, 66, 138, 144, 36, 159, 246, 46, 236, 248, 34,
        19, 122, 208, 20, 121, 109, 50, 48, 44, 73, 110, 218, 213, 229, 85, 227, 152, 251, 68, 201, 114, 28, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const { sigMsg, error } = xmssFastSignMessage(hashFunction, params, sk, bdsState, message);

      expect(params).to.deep.equal(expectedParams);
      expect(sk).to.deep.equal(expectedSk);
      expect(bdsState).to.deep.equal(expectedBdsState);
      expect(message).to.deep.equal(expectedMessage);
      expect(sigMsg).to.deep.equal(expectedSigMsg);
      expect(error).to.equal(null);
    });

    it('should return sigMsg after signing the message, with message[0, 0, ...]', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const n = 32;
      const height = 4;
      const w = 16;
      const k = 2;
      const params = newXMSSParams(n, height, w, k);
      const sk = new Uint8Array([
        0, 0, 0, 0, 237, 163, 19, 201, 85, 145, 160, 35, 165, 179, 127, 54, 28, 7, 165, 117, 58, 146, 211, 208, 66, 116,
        89, 243, 76, 120, 149, 215, 39, 214, 40, 22, 179, 170, 34, 36, 235, 157, 130, 49, 39, 212, 249, 248, 163, 15,
        215, 161, 160, 44, 100, 131, 217, 192, 241, 253, 65, 149, 123, 154, 228, 223, 198, 58, 49, 145, 218, 52, 66,
        104, 98, 130, 179, 213, 22, 15, 37, 207, 22, 42, 81, 127, 210, 19, 31, 131, 251, 242, 105, 138, 88, 249, 196,
        106, 252, 93, 194, 81, 136, 181, 133, 247, 49, 193, 40, 226, 180, 87, 6, 158, 175, 209, 227, 250, 57, 97, 96,
        90, 248, 197, 138, 26, 236, 77, 130, 172, 49, 109,
      ]);
      const bdsState = newBDSState(height, n, k);
      const message = new Uint8Array([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedParams = newXMSSParams(n, height, w, k);
      const expectedSk = new Uint8Array([
        0, 0, 0, 1, 237, 163, 19, 201, 85, 145, 160, 35, 165, 179, 127, 54, 28, 7, 165, 117, 58, 146, 211, 208, 66, 116,
        89, 243, 76, 120, 149, 215, 39, 214, 40, 22, 179, 170, 34, 36, 235, 157, 130, 49, 39, 212, 249, 248, 163, 15,
        215, 161, 160, 44, 100, 131, 217, 192, 241, 253, 65, 149, 123, 154, 228, 223, 198, 58, 49, 145, 218, 52, 66,
        104, 98, 130, 179, 213, 22, 15, 37, 207, 22, 42, 81, 127, 210, 19, 31, 131, 251, 242, 105, 138, 88, 249, 196,
        106, 252, 93, 194, 81, 136, 181, 133, 247, 49, 193, 40, 226, 180, 87, 6, 158, 175, 209, 227, 250, 57, 97, 96,
        90, 248, 197, 138, 26, 236, 77, 130, 172, 49, 109,
      ]);
      const expectedBdsState = {
        auth: new Uint8Array([
          60, 137, 245, 64, 97, 152, 193, 57, 123, 165, 33, 143, 119, 26, 81, 84, 157, 94, 108, 98, 197, 133, 57, 194,
          131, 24, 156, 191, 2, 137, 159, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackLevels: new Uint8Array([0, 0, 0, 0, 0]),
        stackOffset: 0,
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              60, 137, 245, 64, 97, 152, 193, 57, 123, 165, 33, 143, 119, 26, 81, 84, 157, 94, 108, 98, 197, 133, 57,
              194, 131, 24, 156, 191, 2, 137, 159, 166,
            ]),
          },
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 0,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
      };
      const expectedMessage = new Uint8Array([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedSigMsg = new Uint8Array([
        0, 0, 0, 0, 16, 221, 252, 63, 123, 251, 156, 149, 204, 72, 244, 207, 172, 30, 255, 44, 187, 3, 192, 208, 100,
        126, 65, 168, 77, 232, 211, 236, 235, 254, 11, 194, 93, 229, 111, 117, 118, 173, 145, 2, 222, 214, 65, 109, 196,
        141, 182, 25, 199, 237, 40, 228, 222, 143, 26, 31, 164, 202, 160, 239, 217, 218, 237, 151, 12, 142, 159, 15,
        125, 230, 224, 165, 146, 175, 143, 187, 190, 100, 149, 202, 169, 2, 145, 101, 122, 227, 88, 24, 87, 226, 22,
        243, 8, 122, 208, 208, 12, 153, 72, 237, 249, 83, 216, 163, 76, 74, 192, 203, 158, 103, 32, 8, 94, 48, 248, 150,
        143, 15, 70, 215, 100, 132, 28, 66, 55, 107, 31, 73, 146, 13, 89, 49, 218, 20, 136, 15, 249, 143, 36, 0, 166,
        93, 31, 239, 124, 146, 249, 57, 94, 177, 79, 146, 96, 126, 73, 160, 152, 130, 71, 86, 30, 6, 171, 10, 192, 229,
        101, 141, 243, 219, 131, 182, 190, 248, 221, 195, 122, 180, 81, 109, 92, 214, 12, 12, 100, 77, 183, 143, 178,
        214, 62, 156, 93, 57, 235, 244, 18, 130, 117, 23, 76, 102, 141, 223, 154, 82, 178, 93, 193, 205, 254, 227, 158,
        213, 69, 46, 7, 167, 237, 204, 59, 118, 147, 199, 110, 11, 7, 94, 25, 250, 140, 39, 91, 153, 65, 181, 23, 101,
        82, 34, 83, 43, 99, 193, 135, 6, 205, 169, 127, 76, 50, 160, 114, 4, 104, 115, 19, 80, 156, 252, 170, 10, 100,
        175, 165, 114, 237, 26, 250, 128, 170, 72, 90, 128, 91, 69, 107, 40, 250, 36, 77, 117, 142, 31, 162, 179, 40,
        53, 235, 165, 53, 81, 185, 92, 34, 232, 128, 15, 10, 137, 88, 144, 218, 100, 54, 170, 242, 94, 228, 139, 3, 7,
        65, 223, 182, 221, 237, 113, 45, 29, 242, 156, 126, 128, 170, 31, 112, 22, 94, 200, 145, 41, 102, 206, 102, 102,
        166, 195, 102, 91, 52, 80, 236, 46, 21, 226, 158, 120, 15, 152, 178, 255, 236, 0, 220, 211, 174, 220, 45, 4,
        164, 60, 237, 71, 209, 197, 41, 23, 168, 82, 143, 166, 164, 108, 119, 172, 194, 39, 214, 143, 84, 106, 18, 130,
        95, 205, 206, 27, 36, 70, 251, 188, 112, 71, 51, 126, 142, 236, 41, 109, 146, 89, 215, 95, 244, 178, 25, 214,
        54, 208, 152, 35, 146, 106, 229, 123, 193, 216, 224, 87, 128, 4, 141, 39, 117, 81, 2, 68, 99, 93, 6, 242, 44,
        72, 173, 41, 158, 0, 104, 130, 171, 126, 237, 43, 12, 88, 99, 20, 2, 26, 104, 19, 191, 113, 12, 193, 231, 227,
        27, 233, 48, 127, 220, 221, 161, 94, 132, 211, 186, 133, 58, 2, 158, 177, 115, 47, 246, 165, 86, 9, 49, 251,
        118, 52, 206, 212, 148, 142, 16, 70, 175, 148, 154, 149, 213, 179, 243, 81, 14, 137, 33, 183, 219, 4, 201, 223,
        216, 85, 53, 55, 231, 216, 221, 38, 160, 201, 52, 56, 187, 58, 195, 150, 190, 213, 138, 227, 217, 108, 25, 189,
        170, 106, 27, 250, 28, 184, 179, 238, 236, 192, 69, 138, 26, 55, 196, 215, 121, 3, 15, 180, 75, 161, 2, 14, 121,
        197, 109, 206, 180, 67, 134, 135, 2, 160, 113, 129, 247, 116, 13, 197, 20, 119, 146, 141, 166, 49, 181, 43, 146,
        141, 11, 129, 201, 163, 122, 73, 160, 166, 49, 28, 22, 221, 98, 41, 186, 201, 216, 144, 172, 143, 242, 211, 105,
        214, 200, 157, 86, 56, 168, 127, 61, 162, 162, 237, 8, 135, 137, 125, 142, 56, 177, 1, 137, 188, 206, 137, 107,
        228, 194, 99, 120, 245, 246, 42, 147, 169, 114, 219, 5, 141, 127, 128, 37, 9, 75, 25, 212, 234, 217, 78, 128,
        79, 53, 50, 58, 136, 145, 216, 10, 135, 159, 160, 98, 203, 57, 84, 217, 108, 100, 81, 167, 104, 202, 48, 115,
        246, 137, 34, 140, 98, 155, 33, 45, 222, 45, 100, 96, 93, 129, 183, 246, 99, 202, 180, 208, 181, 107, 158, 67,
        237, 201, 165, 143, 146, 182, 164, 160, 61, 205, 190, 96, 250, 67, 18, 158, 103, 132, 74, 134, 125, 53, 13, 102,
        138, 47, 63, 206, 226, 108, 146, 229, 83, 33, 5, 33, 95, 203, 110, 99, 230, 12, 75, 217, 215, 58, 63, 97, 102,
        154, 184, 114, 180, 114, 86, 144, 198, 48, 77, 155, 198, 173, 203, 63, 86, 75, 24, 15, 228, 172, 170, 74, 55,
        205, 77, 1, 139, 58, 13, 193, 22, 83, 172, 103, 148, 52, 99, 29, 123, 39, 36, 127, 236, 166, 74, 138, 5, 217,
        113, 212, 179, 35, 140, 228, 33, 125, 75, 41, 2, 53, 176, 30, 84, 185, 222, 105, 253, 1, 69, 6, 121, 177, 100,
        196, 95, 206, 168, 216, 115, 234, 75, 208, 176, 55, 125, 54, 80, 106, 152, 57, 46, 40, 254, 129, 197, 37, 112,
        61, 169, 228, 166, 54, 239, 76, 26, 201, 144, 183, 39, 134, 157, 162, 229, 74, 142, 210, 117, 117, 43, 142, 217,
        20, 217, 11, 198, 133, 206, 87, 42, 131, 3, 47, 4, 242, 102, 216, 187, 20, 244, 80, 145, 124, 145, 204, 131,
        199, 228, 4, 173, 41, 5, 207, 190, 78, 162, 228, 11, 117, 124, 126, 62, 64, 151, 246, 180, 172, 145, 87, 131,
        107, 30, 164, 17, 127, 206, 207, 183, 82, 73, 100, 246, 4, 85, 152, 76, 5, 116, 173, 255, 234, 40, 148, 20, 222,
        165, 51, 44, 40, 31, 198, 88, 174, 224, 45, 148, 133, 158, 15, 147, 84, 114, 53, 130, 52, 220, 155, 139, 106,
        68, 168, 74, 132, 61, 223, 8, 202, 33, 197, 199, 153, 102, 231, 245, 7, 76, 109, 255, 43, 4, 11, 74, 175, 213,
        130, 137, 216, 46, 225, 193, 219, 202, 32, 187, 79, 173, 31, 234, 71, 0, 199, 41, 82, 12, 7, 215, 215, 224, 113,
        208, 102, 209, 220, 181, 15, 173, 239, 86, 169, 165, 110, 202, 155, 9, 72, 47, 5, 19, 143, 77, 34, 89, 131, 156,
        128, 174, 30, 179, 241, 14, 39, 35, 63, 135, 97, 205, 122, 103, 134, 146, 77, 108, 239, 167, 174, 203, 97, 13,
        193, 70, 237, 146, 166, 236, 157, 52, 180, 23, 92, 209, 59, 197, 79, 32, 32, 132, 250, 76, 91, 129, 185, 203,
        132, 108, 186, 13, 80, 30, 218, 193, 220, 157, 168, 193, 61, 181, 58, 191, 97, 40, 107, 93, 167, 193, 214, 236,
        178, 158, 46, 212, 174, 169, 5, 126, 104, 119, 7, 214, 152, 132, 182, 22, 134, 137, 77, 9, 62, 44, 225, 91, 130,
        81, 136, 96, 45, 159, 0, 249, 81, 61, 191, 59, 44, 47, 217, 176, 189, 227, 184, 49, 53, 86, 195, 201, 129, 203,
        112, 197, 131, 135, 156, 253, 43, 46, 141, 103, 205, 76, 135, 73, 168, 238, 41, 212, 43, 218, 201, 205, 95, 244,
        77, 131, 117, 196, 149, 254, 192, 120, 0, 81, 216, 5, 229, 230, 38, 18, 57, 59, 36, 234, 41, 35, 36, 201, 212,
        88, 81, 124, 165, 207, 6, 249, 186, 201, 221, 200, 77, 3, 210, 12, 121, 255, 141, 84, 223, 41, 124, 75, 99, 13,
        95, 209, 158, 117, 98, 30, 117, 38, 145, 103, 64, 6, 92, 79, 199, 74, 36, 102, 195, 44, 109, 159, 13, 156, 77,
        238, 107, 108, 196, 12, 78, 53, 231, 125, 121, 167, 46, 193, 86, 101, 65, 130, 62, 10, 203, 211, 16, 34, 206,
        175, 213, 135, 16, 40, 154, 192, 105, 158, 214, 226, 81, 134, 99, 140, 55, 151, 154, 14, 87, 242, 219, 13, 97,
        57, 96, 139, 107, 255, 59, 72, 214, 43, 168, 115, 121, 246, 66, 160, 2, 86, 29, 195, 138, 189, 201, 183, 153,
        224, 194, 208, 53, 111, 113, 73, 20, 244, 212, 49, 110, 59, 167, 112, 196, 171, 126, 48, 194, 43, 224, 160, 185,
        32, 241, 50, 75, 237, 235, 40, 62, 32, 42, 157, 175, 135, 180, 149, 156, 177, 22, 23, 161, 246, 77, 50, 129, 40,
        66, 143, 199, 204, 121, 71, 191, 225, 82, 89, 253, 17, 168, 187, 102, 57, 22, 162, 136, 145, 222, 200, 51, 76,
        21, 71, 211, 113, 81, 160, 95, 221, 253, 224, 25, 10, 218, 50, 45, 190, 157, 219, 131, 235, 5, 149, 178, 117,
        24, 39, 120, 43, 158, 231, 142, 62, 144, 160, 31, 20, 33, 39, 159, 205, 13, 207, 16, 150, 157, 24, 99, 60, 75,
        164, 60, 191, 42, 131, 100, 250, 34, 195, 41, 93, 71, 26, 220, 65, 101, 29, 11, 207, 54, 117, 31, 228, 158, 20,
        108, 184, 93, 95, 63, 155, 156, 103, 48, 190, 220, 99, 136, 230, 56, 209, 230, 92, 129, 249, 37, 77, 214, 43,
        168, 38, 76, 26, 224, 22, 249, 205, 51, 186, 80, 161, 87, 118, 60, 163, 209, 116, 145, 182, 164, 135, 214, 57,
        139, 206, 158, 195, 104, 130, 174, 248, 77, 12, 192, 120, 221, 179, 41, 174, 241, 150, 44, 134, 175, 57, 37,
        107, 198, 90, 185, 38, 82, 110, 168, 215, 178, 144, 186, 173, 242, 20, 93, 78, 10, 202, 243, 12, 36, 253, 109,
        96, 60, 27, 60, 255, 26, 108, 81, 255, 65, 228, 171, 95, 97, 172, 189, 11, 253, 12, 194, 60, 24, 166, 132, 228,
        12, 165, 241, 22, 43, 8, 194, 65, 149, 103, 146, 133, 94, 162, 151, 18, 199, 159, 251, 235, 4, 223, 50, 208, 39,
        251, 104, 218, 59, 102, 117, 21, 192, 81, 164, 7, 21, 166, 120, 30, 204, 3, 19, 252, 145, 232, 212, 75, 142,
        254, 206, 105, 178, 197, 51, 29, 250, 19, 169, 6, 17, 85, 50, 109, 16, 106, 33, 179, 194, 11, 132, 224, 200,
        178, 249, 186, 112, 23, 182, 100, 52, 236, 187, 159, 45, 214, 250, 239, 198, 124, 218, 233, 98, 253, 159, 116,
        9, 59, 82, 201, 227, 40, 145, 177, 144, 132, 12, 214, 51, 63, 228, 228, 191, 89, 80, 133, 41, 229, 171, 59, 91,
        26, 186, 131, 86, 95, 245, 212, 122, 58, 7, 181, 90, 186, 242, 164, 98, 174, 6, 207, 231, 231, 43, 244, 161,
        135, 3, 227, 194, 168, 64, 243, 253, 31, 38, 54, 20, 219, 114, 240, 212, 232, 57, 30, 52, 139, 17, 113, 131, 25,
        50, 78, 141, 22, 83, 125, 23, 155, 252, 176, 56, 153, 117, 85, 182, 125, 234, 225, 134, 129, 154, 97, 174, 98,
        151, 175, 157, 177, 227, 19, 238, 170, 155, 88, 195, 178, 183, 145, 143, 30, 227, 76, 68, 97, 232, 145, 45, 210,
        148, 74, 191, 37, 78, 154, 46, 54, 169, 156, 57, 32, 101, 64, 139, 3, 18, 81, 255, 8, 149, 183, 231, 35, 29, 71,
        88, 82, 246, 213, 26, 196, 80, 244, 145, 172, 118, 203, 141, 173, 5, 59, 81, 26, 23, 252, 243, 153, 129, 22, 86,
        112, 174, 94, 171, 97, 24, 197, 6, 188, 28, 103, 192, 53, 229, 37, 221, 35, 204, 100, 72, 215, 184, 188, 43, 12,
        194, 26, 45, 48, 22, 125, 67, 204, 143, 230, 198, 55, 58, 4, 27, 42, 45, 114, 13, 206, 132, 91, 225, 120, 205,
        81, 232, 31, 46, 182, 147, 31, 205, 30, 99, 119, 133, 80, 96, 14, 145, 88, 92, 200, 50, 191, 77, 34, 21, 123,
        173, 197, 187, 13, 161, 225, 47, 160, 160, 55, 53, 240, 63, 56, 117, 28, 11, 198, 76, 224, 73, 5, 7, 27, 118,
        217, 204, 224, 62, 238, 192, 238, 254, 130, 26, 2, 143, 77, 24, 223, 178, 232, 209, 21, 99, 198, 238, 193, 176,
        138, 231, 129, 24, 172, 61, 98, 215, 149, 64, 236, 236, 14, 17, 249, 252, 95, 81, 210, 251, 56, 103, 238, 164,
        92, 31, 176, 217, 240, 58, 48, 209, 121, 134, 21, 203, 186, 71, 14, 187, 96, 40, 16, 56, 9, 213, 4, 202, 202,
        194, 108, 251, 88, 61, 188, 177, 16, 74, 173, 222, 91, 51, 43, 105, 56, 131, 46, 249, 31, 87, 200, 66, 88, 130,
        194, 125, 161, 252, 138, 87, 63, 29, 154, 195, 135, 152, 245, 128, 134, 36, 214, 76, 149, 202, 162, 177, 0, 154,
        181, 209, 186, 53, 176, 61, 67, 175, 234, 49, 205, 75, 237, 83, 171, 87, 234, 140, 96, 9, 162, 4, 176, 211, 14,
        10, 214, 51, 164, 54, 162, 183, 22, 134, 1, 132, 145, 144, 99, 206, 90, 221, 172, 4, 52, 122, 27, 235, 163, 208,
        62, 65, 237, 111, 252, 88, 169, 23, 177, 63, 182, 79, 31, 54, 197, 247, 36, 77, 251, 250, 84, 101, 171, 158, 93,
        222, 157, 65, 184, 117, 242, 48, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const { sigMsg, error } = xmssFastSignMessage(hashFunction, params, sk, bdsState, message);

      expect(params).to.deep.equal(expectedParams);
      expect(sk).to.deep.equal(expectedSk);
      expect(bdsState).to.deep.equal(expectedBdsState);
      expect(message).to.deep.equal(expectedMessage);
      expect(sigMsg).to.deep.equal(expectedSigMsg);
      expect(error).to.equal(null);
    });

    it('should return sigMsg after signing the message, with message[104, 188, ...]', () => {
      const hashFunction = HASH_FUNCTION.SHAKE_256;
      const n = 32;
      const height = 4;
      const w = 16;
      const k = 2;
      const params = newXMSSParams(n, height, w, k);
      const sk = new Uint8Array([
        177, 2, 23, 207, 113, 64, 68, 168, 145, 161, 159, 60, 23, 178, 103, 80, 16, 224, 93, 94, 168, 74, 150, 177, 129,
        146, 105, 149, 223, 91, 189, 219, 82, 59, 118, 81, 127, 163, 34, 207, 94, 197, 55, 252, 106, 127, 116, 166, 240,
        17, 15, 153, 111, 198, 90, 106, 155, 213, 242, 184, 170, 87, 170, 104, 213, 206, 3, 228, 222, 181, 62, 214, 217,
        118, 163, 23, 208, 59, 37, 14, 135, 2, 246, 141, 158, 93, 10, 65, 197, 172, 108, 94, 203, 241, 78, 182, 218,
        114, 40, 174, 207, 198, 81, 128, 140, 221, 159, 232, 161, 55, 125, 144, 120, 55, 162, 192, 146, 225, 42, 200, 8,
        58, 85, 222, 144, 79, 84, 178, 146, 196, 8, 103,
      ]);
      const bdsState = newBDSState(height, n, k);
      const message = new Uint8Array([
        104, 188, 39, 89, 62, 198, 136, 70, 70, 34, 193, 94, 130, 14, 84, 86, 110, 28, 151, 246, 202, 79, 180, 172, 118,
        158, 48, 147, 31, 238, 25, 82,
      ]);
      const expectedParams = newXMSSParams(n, height, w, k);
      const expectedSk = new Uint8Array([
        177, 2, 23, 208, 113, 64, 68, 168, 145, 161, 159, 60, 23, 178, 103, 80, 16, 224, 93, 94, 168, 74, 150, 177, 129,
        146, 105, 149, 223, 91, 189, 219, 82, 59, 118, 81, 127, 163, 34, 207, 94, 197, 55, 252, 106, 127, 116, 166, 240,
        17, 15, 153, 111, 198, 90, 106, 155, 213, 242, 184, 170, 87, 170, 104, 213, 206, 3, 228, 222, 181, 62, 214, 217,
        118, 163, 23, 208, 59, 37, 14, 135, 2, 246, 141, 158, 93, 10, 65, 197, 172, 108, 94, 203, 241, 78, 182, 218,
        114, 40, 174, 207, 198, 81, 128, 140, 221, 159, 232, 161, 55, 125, 144, 120, 55, 162, 192, 146, 225, 42, 200, 8,
        58, 85, 222, 144, 79, 84, 178, 146, 196, 8, 103,
      ]);
      const expectedBdsState = {
        auth: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackLevels: new Uint8Array([0, 0, 0, 0, 0]),
        stackOffset: 0,
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 0,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 0,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
      };
      const expectedMessage = new Uint8Array([
        104, 188, 39, 89, 62, 198, 136, 70, 70, 34, 193, 94, 130, 14, 84, 86, 110, 28, 151, 246, 202, 79, 180, 172, 118,
        158, 48, 147, 31, 238, 25, 82,
      ]);
      const expectedSigMsg = new Uint8Array([
        177, 2, 23, 207, 182, 143, 234, 184, 91, 67, 168, 187, 11, 153, 209, 245, 194, 23, 132, 166, 102, 156, 97, 152,
        213, 141, 126, 174, 28, 54, 20, 54, 95, 148, 46, 27, 169, 113, 185, 255, 68, 153, 165, 36, 82, 236, 14, 31, 206,
        225, 127, 207, 98, 5, 175, 0, 88, 251, 86, 20, 200, 98, 2, 158, 253, 18, 7, 165, 146, 200, 168, 202, 67, 46, 99,
        102, 215, 133, 191, 26, 63, 37, 13, 115, 13, 88, 91, 69, 29, 106, 208, 125, 204, 46, 3, 203, 77, 67, 101, 0,
        243, 235, 255, 201, 183, 13, 243, 253, 162, 32, 137, 36, 55, 57, 162, 11, 39, 74, 182, 13, 62, 15, 218, 61, 167,
        78, 170, 87, 12, 5, 178, 35, 0, 99, 197, 222, 61, 157, 106, 165, 215, 219, 54, 118, 247, 70, 204, 248, 70, 76,
        101, 67, 170, 216, 123, 87, 54, 76, 148, 242, 151, 4, 15, 105, 239, 171, 48, 22, 48, 58, 186, 22, 142, 57, 170,
        221, 51, 36, 239, 238, 198, 236, 107, 111, 59, 2, 137, 8, 171, 78, 38, 132, 20, 105, 41, 194, 214, 81, 88, 179,
        22, 144, 176, 116, 246, 202, 204, 189, 105, 126, 103, 145, 188, 137, 77, 144, 102, 102, 144, 223, 116, 28, 251,
        26, 78, 145, 32, 67, 117, 185, 127, 193, 114, 200, 67, 54, 12, 172, 197, 242, 27, 231, 150, 7, 70, 70, 223, 87,
        154, 77, 109, 82, 20, 78, 43, 13, 76, 11, 94, 207, 0, 183, 225, 150, 7, 198, 251, 37, 1, 72, 78, 107, 241, 114,
        233, 66, 71, 178, 175, 90, 115, 128, 61, 175, 255, 154, 33, 200, 106, 96, 60, 78, 8, 169, 53, 90, 192, 181, 222,
        143, 247, 161, 239, 130, 62, 162, 198, 110, 236, 129, 233, 18, 96, 174, 224, 92, 221, 224, 43, 95, 74, 52, 126,
        22, 189, 116, 127, 198, 9, 230, 44, 145, 147, 144, 129, 198, 224, 250, 169, 4, 167, 126, 229, 118, 59, 232, 5,
        125, 23, 216, 220, 104, 207, 247, 192, 121, 42, 176, 182, 100, 143, 166, 60, 190, 210, 115, 219, 32, 133, 1,
        154, 158, 246, 97, 36, 222, 165, 192, 21, 134, 36, 7, 62, 147, 146, 211, 213, 188, 104, 50, 128, 176, 202, 81,
        222, 137, 108, 27, 176, 236, 239, 219, 214, 168, 81, 112, 74, 228, 146, 254, 24, 143, 5, 110, 135, 172, 124,
        162, 0, 212, 56, 40, 218, 250, 209, 30, 100, 120, 97, 201, 139, 219, 201, 209, 215, 224, 65, 20, 74, 10, 86, 73,
        83, 33, 177, 106, 9, 212, 179, 227, 115, 163, 241, 92, 237, 255, 93, 179, 234, 189, 50, 160, 208, 214, 92, 98,
        184, 111, 87, 93, 195, 46, 245, 80, 161, 239, 47, 195, 164, 218, 98, 74, 107, 80, 223, 158, 231, 166, 254, 65,
        239, 241, 130, 65, 71, 140, 71, 182, 9, 221, 230, 3, 197, 107, 220, 79, 249, 90, 49, 153, 208, 175, 168, 214,
        193, 153, 120, 23, 150, 108, 196, 151, 227, 66, 141, 158, 144, 41, 98, 193, 233, 20, 24, 109, 160, 37, 77, 157,
        158, 74, 16, 239, 126, 244, 126, 173, 130, 21, 212, 166, 11, 73, 201, 212, 231, 80, 139, 243, 108, 150, 213,
        181, 83, 171, 190, 181, 23, 216, 62, 140, 239, 77, 164, 198, 113, 169, 45, 77, 7, 86, 64, 234, 206, 105, 18,
        178, 70, 111, 69, 217, 95, 82, 96, 169, 228, 222, 87, 100, 183, 113, 195, 150, 57, 52, 103, 97, 156, 181, 157,
        55, 14, 113, 235, 228, 30, 79, 148, 20, 170, 119, 59, 88, 0, 41, 154, 32, 247, 242, 7, 224, 35, 12, 161, 176,
        91, 137, 160, 153, 197, 118, 243, 120, 37, 87, 236, 27, 55, 52, 24, 26, 66, 169, 42, 150, 185, 13, 147, 179,
        128, 58, 125, 68, 36, 114, 23, 235, 255, 128, 224, 208, 174, 65, 253, 14, 38, 166, 229, 108, 255, 160, 122, 204,
        90, 236, 251, 131, 61, 154, 202, 150, 181, 123, 244, 113, 104, 72, 193, 6, 155, 219, 220, 133, 250, 55, 41, 197,
        24, 245, 67, 78, 5, 251, 109, 31, 38, 247, 251, 117, 28, 162, 237, 90, 183, 22, 124, 140, 247, 112, 118, 101,
        106, 150, 224, 45, 219, 194, 216, 180, 39, 158, 103, 110, 75, 156, 215, 47, 47, 165, 158, 45, 105, 140, 215, 51,
        164, 104, 171, 77, 53, 164, 76, 140, 46, 177, 42, 118, 214, 228, 104, 110, 227, 147, 147, 140, 82, 213, 150, 65,
        87, 187, 133, 147, 48, 110, 14, 150, 227, 188, 82, 163, 46, 109, 155, 35, 73, 32, 6, 116, 185, 62, 37, 62, 6,
        51, 30, 53, 86, 76, 216, 156, 130, 132, 9, 123, 142, 126, 29, 53, 219, 122, 51, 122, 62, 244, 73, 162, 129, 1,
        6, 60, 55, 208, 25, 4, 108, 65, 41, 72, 157, 21, 94, 194, 213, 185, 34, 122, 234, 219, 25, 74, 241, 86, 163,
        192, 77, 65, 42, 212, 65, 50, 69, 74, 13, 206, 204, 50, 45, 85, 214, 147, 214, 173, 82, 103, 243, 72, 151, 131,
        17, 31, 233, 34, 236, 205, 187, 112, 172, 40, 153, 49, 95, 250, 88, 82, 91, 34, 115, 167, 70, 216, 146, 220,
        248, 149, 253, 81, 39, 2, 13, 134, 132, 198, 176, 156, 201, 140, 211, 210, 241, 70, 173, 81, 152, 150, 202, 163,
        56, 53, 254, 18, 184, 173, 102, 235, 118, 68, 234, 38, 189, 26, 133, 16, 210, 104, 247, 111, 162, 222, 141, 225,
        142, 89, 244, 173, 126, 198, 24, 212, 191, 137, 66, 165, 36, 27, 143, 67, 109, 146, 85, 158, 56, 36, 165, 21,
        19, 2, 159, 96, 123, 200, 230, 177, 81, 65, 122, 132, 202, 253, 120, 176, 201, 30, 5, 142, 191, 101, 66, 178,
        118, 249, 212, 203, 223, 32, 124, 130, 59, 222, 195, 16, 163, 24, 139, 61, 243, 250, 5, 229, 219, 204, 154, 107,
        152, 44, 106, 142, 236, 31, 172, 156, 109, 117, 78, 118, 124, 59, 83, 223, 10, 197, 91, 120, 5, 234, 16, 131,
        192, 84, 117, 192, 249, 78, 206, 85, 122, 18, 210, 85, 182, 140, 148, 126, 74, 196, 29, 58, 142, 125, 205, 182,
        234, 211, 82, 163, 7, 73, 74, 228, 170, 163, 144, 138, 169, 105, 49, 154, 128, 128, 58, 209, 112, 77, 101, 201,
        171, 48, 147, 23, 205, 216, 124, 160, 149, 33, 113, 91, 175, 117, 253, 107, 111, 185, 84, 36, 178, 236, 81, 146,
        2, 8, 20, 82, 202, 154, 121, 195, 66, 164, 81, 82, 22, 61, 70, 131, 29, 201, 71, 27, 129, 74, 152, 196, 203, 24,
        108, 84, 10, 144, 223, 30, 78, 216, 152, 130, 178, 195, 172, 185, 14, 142, 95, 101, 144, 233, 2, 46, 169, 31,
        240, 159, 115, 136, 123, 45, 104, 65, 49, 180, 155, 57, 60, 107, 96, 189, 166, 16, 250, 11, 102, 143, 204, 81,
        221, 114, 144, 16, 241, 252, 226, 113, 116, 126, 152, 97, 78, 255, 61, 221, 178, 12, 165, 241, 169, 139, 96, 9,
        120, 152, 43, 160, 81, 52, 238, 2, 200, 63, 105, 60, 64, 59, 129, 19, 67, 94, 103, 230, 0, 34, 81, 61, 217, 18,
        175, 238, 11, 227, 69, 58, 79, 160, 209, 46, 15, 169, 11, 30, 68, 232, 167, 19, 240, 78, 147, 9, 215, 76, 46,
        227, 179, 159, 43, 113, 100, 162, 61, 7, 221, 20, 175, 3, 166, 98, 116, 128, 42, 127, 3, 69, 211, 157, 215, 246,
        159, 68, 44, 15, 142, 132, 80, 75, 15, 149, 191, 53, 34, 218, 153, 87, 42, 210, 7, 75, 241, 141, 195, 174, 131,
        168, 61, 214, 59, 42, 112, 198, 116, 173, 77, 76, 214, 60, 84, 202, 199, 6, 114, 142, 112, 162, 146, 142, 213,
        175, 143, 168, 223, 254, 173, 22, 166, 194, 74, 150, 104, 24, 255, 171, 230, 18, 226, 171, 95, 53, 95, 80, 27,
        210, 192, 165, 38, 97, 249, 95, 73, 170, 98, 223, 130, 48, 62, 0, 229, 104, 219, 23, 9, 113, 156, 129, 93, 182,
        157, 6, 100, 98, 218, 111, 101, 25, 153, 24, 194, 61, 254, 58, 46, 251, 11, 106, 249, 148, 212, 86, 202, 74, 71,
        166, 210, 204, 207, 60, 182, 161, 0, 22, 85, 186, 163, 233, 228, 19, 67, 183, 37, 211, 155, 31, 25, 5, 15, 211,
        8, 19, 230, 237, 174, 155, 103, 240, 120, 3, 92, 69, 198, 173, 155, 39, 38, 47, 208, 82, 220, 149, 23, 187, 65,
        32, 237, 99, 120, 40, 25, 86, 165, 202, 131, 8, 164, 247, 11, 161, 217, 114, 193, 133, 124, 210, 23, 166, 243,
        204, 140, 111, 86, 36, 134, 84, 160, 153, 183, 250, 71, 181, 230, 74, 240, 84, 11, 103, 2, 104, 229, 38, 3, 102,
        73, 174, 223, 3, 107, 243, 50, 232, 123, 34, 135, 177, 58, 150, 144, 89, 86, 173, 218, 214, 148, 236, 180, 227,
        183, 100, 199, 84, 31, 180, 184, 141, 12, 169, 183, 125, 2, 5, 248, 144, 63, 234, 178, 218, 64, 24, 130, 224,
        93, 26, 100, 87, 194, 6, 54, 178, 149, 109, 246, 85, 114, 254, 127, 80, 116, 28, 206, 240, 142, 21, 92, 17, 205,
        255, 206, 184, 88, 217, 4, 4, 16, 94, 91, 27, 203, 239, 20, 43, 166, 198, 33, 225, 131, 149, 158, 190, 88, 124,
        229, 150, 222, 21, 225, 50, 248, 188, 156, 118, 38, 236, 86, 18, 133, 183, 57, 189, 181, 236, 90, 74, 152, 193,
        202, 35, 128, 47, 155, 183, 86, 49, 29, 178, 25, 162, 35, 8, 240, 180, 72, 86, 136, 123, 155, 0, 118, 6, 29,
        189, 191, 162, 166, 210, 204, 210, 21, 138, 87, 177, 19, 138, 185, 159, 17, 153, 153, 142, 24, 111, 187, 240,
        148, 161, 233, 80, 145, 68, 113, 240, 93, 71, 151, 102, 109, 57, 116, 143, 222, 227, 77, 160, 6, 104, 16, 104,
        11, 151, 5, 120, 134, 88, 160, 34, 47, 59, 8, 53, 121, 167, 135, 253, 106, 28, 242, 207, 17, 234, 16, 223, 169,
        4, 110, 66, 15, 40, 15, 136, 137, 96, 81, 206, 81, 149, 86, 124, 116, 33, 56, 21, 254, 92, 194, 66, 51, 207,
        178, 163, 98, 106, 119, 72, 119, 245, 89, 8, 30, 10, 24, 43, 132, 132, 231, 96, 224, 224, 241, 124, 247, 5, 15,
        97, 134, 137, 111, 232, 158, 1, 193, 248, 124, 24, 224, 200, 226, 15, 123, 88, 120, 118, 192, 127, 4, 233, 103,
        237, 79, 82, 212, 33, 52, 253, 20, 118, 160, 166, 33, 151, 2, 92, 216, 166, 102, 129, 217, 173, 219, 238, 36,
        139, 94, 72, 51, 11, 46, 132, 118, 87, 77, 176, 142, 52, 10, 123, 222, 227, 53, 55, 16, 246, 248, 9, 250, 217,
        188, 196, 250, 193, 14, 167, 167, 190, 38, 58, 190, 20, 196, 152, 247, 196, 223, 88, 13, 97, 211, 37, 148, 143,
        212, 37, 29, 91, 98, 10, 219, 96, 174, 144, 5, 79, 59, 182, 22, 172, 213, 251, 93, 212, 20, 78, 79, 113, 95,
        250, 39, 140, 116, 41, 129, 133, 86, 129, 46, 230, 198, 32, 157, 36, 3, 147, 114, 254, 66, 157, 22, 174, 145,
        14, 176, 230, 26, 176, 129, 37, 52, 13, 2, 137, 183, 86, 250, 71, 96, 151, 210, 57, 148, 75, 4, 41, 171, 149,
        48, 37, 168, 31, 158, 9, 46, 119, 58, 55, 193, 175, 116, 21, 98, 81, 165, 147, 166, 88, 3, 61, 59, 228, 18, 135,
        146, 232, 61, 198, 119, 28, 252, 74, 165, 142, 113, 255, 237, 251, 44, 118, 248, 48, 153, 127, 91, 136, 216,
        128, 93, 185, 143, 171, 249, 67, 224, 102, 12, 200, 37, 232, 109, 223, 248, 216, 127, 160, 177, 67, 121, 34, 46,
        5, 211, 251, 187, 194, 99, 64, 134, 114, 12, 241, 39, 221, 12, 146, 172, 111, 17, 28, 10, 86, 249, 253, 21, 216,
        4, 3, 200, 103, 14, 160, 153, 218, 167, 160, 133, 239, 92, 76, 213, 244, 175, 79, 131, 65, 68, 33, 102, 198, 22,
        70, 21, 115, 166, 39, 130, 26, 105, 104, 56, 172, 23, 153, 96, 13, 3, 87, 157, 193, 115, 107, 76, 218, 32, 51,
        35, 54, 112, 146, 82, 29, 12, 214, 187, 171, 121, 90, 147, 197, 168, 227, 84, 54, 209, 119, 240, 77, 187, 13,
        114, 30, 210, 119, 84, 150, 240, 194, 87, 94, 146, 227, 13, 13, 6, 122, 151, 255, 101, 132, 228, 28, 225, 200,
        80, 148, 207, 98, 133, 105, 140, 89, 35, 57, 182, 233, 89, 217, 64, 254, 197, 1, 132, 204, 174, 190, 221, 32,
        115, 244, 26, 111, 178, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const { sigMsg, error } = xmssFastSignMessage(hashFunction, params, sk, bdsState, message);

      expect(params).to.deep.equal(expectedParams);
      expect(sk).to.deep.equal(expectedSk);
      expect(bdsState).to.deep.equal(expectedBdsState);
      expect(message).to.deep.equal(expectedMessage);
      expect(sigMsg).to.deep.equal(expectedSigMsg);
      expect(error).to.equal(null);
    });
  });

  describe('initializeTree', () => {
    it('should generate xmss tree for extendedSeed[5, 146 ...] and seed[0, 0 ...]', () => {
      const extendedSeed = new Uint8Array([
        5, 146, 182, 224, 114, 250, 181, 221, 201, 138, 132, 84, 79, 78, 158, 191, 80, 177, 135, 151, 5, 221, 84, 237,
        94, 152, 84, 18, 184, 211, 20, 10, 9, 204, 252, 12, 222, 114, 131, 220, 167, 111, 147, 207, 143, 68, 70, 228,
        217, 106, 73,
      ]);
      const desc = newQRLDescriptorFromExtendedSeed(extendedSeed);
      const seed = new Uint8Array(COMMON.SEED_SIZE);
      const xmssTree = initializeTree(desc, seed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 4,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 237, 163, 19, 201, 85, 145, 160, 35, 165, 179, 127, 54, 28, 7, 165, 117, 58, 146, 211, 208, 66, 116,
        89, 243, 76, 120, 149, 215, 39, 214, 40, 22, 179, 170, 34, 36, 235, 157, 130, 49, 39, 212, 249, 248, 163, 15,
        215, 161, 160, 44, 100, 131, 217, 192, 241, 253, 65, 149, 123, 154, 228, 223, 198, 58, 49, 145, 218, 52, 66,
        104, 98, 130, 179, 213, 22, 15, 37, 207, 22, 42, 81, 127, 210, 19, 31, 131, 251, 242, 105, 138, 88, 249, 196,
        106, 252, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedSeed = new Uint8Array([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 5, signatureType: 0, height: 4, addrFormatType: 9 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 5,
        height: 4,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });

    it('should generate xmss tree for desc[6, 1 ...] and seed[68, 24 ...]', () => {
      const desc = newQRLDescriptor(6, HASH_FUNCTION.SHA2_256, 4, 44);
      const seed = new Uint8Array([
        68, 24, 114, 231, 214, 43, 119, 145, 112, 232, 156, 22, 88, 162, 41, 27, 245, 171, 90, 221, 2, 91, 82, 83, 10,
        140, 73, 25, 113, 67, 166, 224, 57, 194, 244, 60, 252, 197, 168, 250, 3, 128, 62, 174, 226, 90, 16, 101,
      ]);
      const xmssTree = initializeTree(desc, seed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 6,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 154, 124, 42, 121, 37, 91, 246, 4, 244, 198, 21, 251, 28, 4, 35, 72, 186, 212, 16, 58, 65, 10, 71,
        199, 179, 243, 41, 255, 130, 228, 229, 218, 103, 150, 133, 159, 31, 169, 114, 23, 101, 118, 205, 2, 69, 93, 244,
        28, 30, 74, 202, 51, 1, 126, 221, 194, 173, 108, 116, 239, 216, 159, 196, 120, 106, 95, 23, 31, 137, 115, 198,
        67, 170, 158, 112, 141, 174, 87, 118, 59, 86, 3, 163, 2, 61, 136, 190, 250, 192, 228, 240, 46, 122, 190, 56,
        114, 241, 68, 91, 104, 2, 87, 5, 51, 74, 254, 235, 95, 98, 146, 115, 119, 21, 107, 20, 228, 162, 151, 209, 61,
        56, 147, 41, 26, 22, 99, 249, 86,
      ]);
      const expectedSeed = new Uint8Array([
        68, 24, 114, 231, 214, 43, 119, 145, 112, 232, 156, 22, 88, 162, 41, 27, 245, 171, 90, 221, 2, 91, 82, 83, 10,
        140, 73, 25, 113, 67, 166, 224, 57, 194, 244, 60, 252, 197, 168, 250, 3, 128, 62, 174, 226, 90, 16, 101,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          239, 230, 210, 209, 42, 56, 30, 84, 20, 13, 235, 131, 43, 250, 72, 181, 51, 206, 243, 93, 123, 209, 25, 150,
          167, 6, 75, 142, 33, 38, 69, 194, 168, 194, 64, 40, 41, 216, 105, 51, 189, 5, 177, 90, 47, 46, 17, 168, 225,
          100, 222, 132, 0, 254, 23, 189, 32, 155, 99, 230, 40, 174, 161, 61, 189, 66, 37, 25, 168, 161, 24, 169, 120,
          232, 73, 118, 210, 119, 182, 255, 21, 61, 167, 132, 110, 187, 204, 128, 88, 0, 142, 109, 177, 41, 21, 22, 116,
          167, 87, 236, 3, 135, 23, 201, 192, 47, 182, 75, 216, 10, 165, 42, 44, 96, 199, 228, 40, 144, 7, 4, 224, 78,
          85, 41, 25, 213, 69, 203, 32, 67, 177, 179, 152, 233, 144, 81, 151, 158, 22, 14, 152, 69, 93, 46, 96, 32, 20,
          80, 4, 98, 52, 23, 248, 240, 39, 216, 237, 76, 155, 242, 217, 19, 226, 29, 84, 199, 189, 167, 119, 213, 26,
          119, 168, 146, 145, 136, 136, 115, 144, 15, 21, 161, 135, 214, 35, 91, 91, 64, 21, 14, 185, 124,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              212, 34, 252, 232, 11, 222, 231, 173, 225, 184, 171, 42, 182, 23, 71, 49, 140, 167, 65, 38, 202, 170, 88,
              205, 157, 237, 252, 218, 243, 92, 100, 244,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              40, 173, 199, 139, 180, 235, 36, 89, 148, 254, 204, 128, 204, 42, 128, 68, 184, 191, 249, 71, 193, 228,
              96, 251, 96, 141, 46, 252, 208, 145, 20, 47,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              255, 187, 140, 215, 114, 144, 244, 141, 243, 154, 33, 43, 124, 6, 241, 31, 230, 139, 82, 85, 92, 170, 235,
              19, 68, 194, 205, 197, 158, 31, 199, 126,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              131, 172, 174, 116, 50, 39, 27, 197, 141, 247, 196, 1, 120, 143, 186, 98, 25, 15, 171, 69, 250, 107, 104,
              207, 103, 68, 250, 83, 241, 30, 194, 189,
            ]),
          },
        ],
        retain: new Uint8Array([
          255, 61, 112, 94, 197, 238, 148, 207, 238, 93, 203, 33, 33, 198, 132, 37, 9, 23, 44, 23, 183, 0, 51, 57, 196,
          172, 42, 240, 237, 183, 242, 131,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 0, signatureType: 4, height: 6, addrFormatType: 44 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 0,
        height: 6,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });

    it('should generate xmss tree for desc[10, 2 ...] and seed[112, 104 ...]', () => {
      const desc = newQRLDescriptor(10, HASH_FUNCTION.SHAKE_256, 7, 13);
      const seed = new Uint8Array([
        112, 104, 137, 192, 105, 171, 35, 223, 91, 12, 173, 112, 183, 118, 223, 141, 63, 16, 125, 67, 71, 76, 28, 116,
        25, 53, 100, 29, 214, 232, 245, 214, 150, 86, 22, 197, 20, 54, 96, 252, 21, 40, 57, 42, 8, 71, 0, 35,
      ]);
      const xmssTree = initializeTree(desc, seed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 10,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 39, 135, 83, 241, 136, 93, 226, 7, 200, 120, 210, 139, 188, 172, 34, 191, 3, 66, 54, 212, 158, 222,
        210, 47, 185, 192, 215, 33, 206, 194, 220, 133, 248, 236, 222, 241, 118, 149, 173, 127, 12, 70, 59, 162, 209,
        16, 67, 178, 44, 70, 42, 5, 32, 155, 87, 62, 229, 243, 29, 249, 194, 203, 149, 232, 119, 221, 48, 105, 254, 149,
        240, 2, 209, 189, 121, 124, 213, 82, 179, 75, 127, 116, 166, 212, 101, 174, 36, 158, 198, 146, 110, 121, 163,
        169, 89, 247, 62, 22, 224, 63, 54, 243, 198, 235, 221, 233, 135, 116, 129, 144, 250, 78, 51, 178, 143, 224, 227,
        45, 249, 97, 217, 13, 237, 89, 237, 215, 128, 127,
      ]);
      const expectedSeed = new Uint8Array([
        112, 104, 137, 192, 105, 171, 35, 223, 91, 12, 173, 112, 183, 118, 223, 141, 63, 16, 125, 67, 71, 76, 28, 116,
        25, 53, 100, 29, 214, 232, 245, 214, 150, 86, 22, 197, 20, 54, 96, 252, 21, 40, 57, 42, 8, 71, 0, 35,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          41, 80, 220, 130, 200, 3, 187, 20, 8, 211, 98, 221, 135, 61, 220, 224, 182, 184, 109, 57, 25, 80, 159, 215,
          173, 69, 209, 251, 115, 14, 23, 172, 223, 215, 81, 242, 128, 87, 6, 131, 248, 212, 200, 188, 195, 36, 6, 173,
          0, 53, 33, 114, 117, 198, 181, 160, 85, 67, 29, 152, 170, 0, 108, 167, 225, 147, 58, 161, 22, 11, 69, 141, 76,
          203, 142, 48, 176, 47, 130, 71, 95, 166, 94, 221, 68, 233, 60, 196, 109, 131, 3, 119, 39, 172, 147, 75, 194,
          238, 231, 11, 233, 63, 91, 156, 106, 72, 121, 206, 65, 204, 36, 37, 145, 255, 140, 164, 70, 65, 89, 119, 8,
          125, 99, 159, 51, 158, 228, 116, 153, 192, 6, 62, 243, 177, 92, 28, 59, 247, 191, 250, 221, 15, 29, 41, 49,
          167, 38, 85, 162, 31, 13, 207, 184, 190, 227, 221, 112, 181, 143, 161, 208, 246, 73, 205, 205, 185, 115, 209,
          138, 105, 56, 93, 68, 183, 23, 188, 50, 200, 78, 210, 73, 215, 60, 86, 120, 89, 13, 64, 52, 189, 35, 48, 193,
          216, 189, 177, 93, 49, 147, 179, 167, 11, 223, 40, 144, 48, 223, 74, 206, 61, 131, 68, 212, 68, 80, 69, 83,
          213, 67, 244, 159, 230, 226, 184, 101, 214, 75, 10, 96, 30, 179, 31, 50, 116, 163, 176, 58, 165, 73, 148, 207,
          73, 180, 115, 16, 234, 248, 172, 238, 113, 9, 202, 117, 96, 154, 13, 27, 241, 218, 194, 127, 243, 243, 171,
          109, 14, 225, 249, 46, 140, 77, 144, 183, 244, 132, 90, 119, 114, 2, 185, 32, 79, 240, 116, 1, 44, 170, 224,
          156, 150, 183, 190, 25, 132, 190, 66, 145, 125, 189, 211, 128, 120, 246, 220, 120, 51, 54, 23, 129, 78, 184,
          226, 112, 54, 187, 219, 218, 183, 228, 227,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              138, 180, 144, 111, 215, 200, 34, 101, 204, 252, 168, 93, 222, 173, 232, 122, 135, 132, 128, 191, 235, 42,
              65, 87, 69, 12, 141, 55, 15, 212, 127, 251,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              54, 85, 11, 179, 236, 72, 88, 165, 85, 48, 194, 250, 167, 170, 174, 183, 245, 33, 121, 123, 76, 56, 76,
              66, 62, 197, 48, 7, 76, 182, 193, 45,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              79, 174, 147, 214, 121, 205, 179, 115, 130, 217, 52, 216, 106, 20, 252, 57, 104, 25, 38, 126, 109, 159,
              95, 110, 67, 144, 96, 241, 62, 72, 147, 99,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              125, 215, 182, 50, 200, 203, 235, 194, 80, 61, 248, 188, 184, 31, 242, 140, 54, 73, 123, 114, 19, 207, 44,
              58, 206, 203, 97, 66, 77, 233, 87, 153,
            ]),
          },
          {
            h: 4,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              188, 70, 56, 170, 197, 170, 100, 25, 198, 47, 138, 203, 88, 157, 227, 79, 58, 221, 252, 47, 116, 58, 186,
              63, 71, 168, 48, 158, 40, 74, 120, 246,
            ]),
          },
          {
            h: 5,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              29, 174, 213, 191, 76, 166, 189, 78, 124, 99, 175, 182, 2, 97, 180, 101, 251, 241, 121, 0, 91, 78, 128,
              205, 202, 97, 215, 19, 88, 29, 222, 241,
            ]),
          },
          {
            h: 6,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              106, 80, 57, 115, 62, 29, 22, 213, 167, 2, 196, 102, 97, 109, 138, 199, 11, 243, 125, 151, 201, 128, 38,
              55, 234, 130, 174, 207, 77, 35, 219, 93,
            ]),
          },
          {
            h: 7,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              202, 110, 220, 51, 199, 211, 17, 131, 65, 253, 180, 164, 243, 76, 197, 6, 46, 52, 178, 194, 160, 8, 98, 6,
              70, 131, 45, 153, 51, 106, 231, 118,
            ]),
          },
        ],
        retain: new Uint8Array([
          55, 56, 230, 69, 249, 176, 209, 23, 75, 94, 43, 16, 39, 89, 27, 230, 200, 47, 254, 239, 134, 142, 56, 232, 71,
          199, 70, 173, 246, 139, 44, 160,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 2, signatureType: 7, height: 10, addrFormatType: 13 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 2,
        height: 10,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });
  });

  describe('newXMSSFromSeed', () => {
    it('should generate xmss tree for seed[122, 12 ...]', () => {
      const seed = new Uint8Array([
        122, 12, 172, 214, 239, 194, 16, 161, 113, 166, 97, 235, 207, 90, 230, 216, 61, 90, 44, 213, 226, 30, 131, 85,
        96, 36, 106, 37, 115, 169, 158, 236, 17, 171, 235, 77, 50, 235, 94, 42, 21, 222, 35, 87, 151, 221, 190, 37,
      ]);
      const height = 12;
      const hashFunction = HASH_FUNCTION.SHA2_256;
      const addrFormatType = 4;
      const xmssTree = newXMSSFromSeed(seed, height, hashFunction, addrFormatType);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 12,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 163, 248, 93, 138, 186, 254, 253, 129, 159, 214, 128, 156, 118, 94, 22, 193, 59, 99, 241, 156, 26,
        25, 79, 55, 225, 55, 254, 9, 83, 190, 135, 69, 3, 80, 157, 48, 170, 62, 23, 53, 244, 72, 50, 104, 91, 40, 151,
        144, 204, 71, 17, 160, 106, 81, 145, 155, 150, 206, 164, 22, 58, 255, 230, 205, 197, 205, 229, 54, 73, 171, 13,
        188, 203, 69, 156, 93, 111, 156, 86, 59, 232, 75, 144, 153, 143, 241, 214, 110, 161, 155, 135, 55, 190, 10, 60,
        218, 121, 243, 50, 119, 230, 31, 156, 244, 201, 186, 201, 173, 206, 221, 33, 14, 239, 14, 120, 94, 203, 152,
        117, 27, 110, 111, 150, 182, 6, 132, 39, 79,
      ]);
      const expectedSeed = new Uint8Array([
        122, 12, 172, 214, 239, 194, 16, 161, 113, 166, 97, 235, 207, 90, 230, 216, 61, 90, 44, 213, 226, 30, 131, 85,
        96, 36, 106, 37, 115, 169, 158, 236, 17, 171, 235, 77, 50, 235, 94, 42, 21, 222, 35, 87, 151, 221, 190, 37,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          39, 23, 239, 134, 120, 149, 201, 21, 254, 171, 197, 51, 154, 98, 104, 138, 20, 155, 230, 180, 65, 57, 91, 18,
          48, 248, 15, 30, 126, 205, 124, 236, 224, 181, 74, 105, 162, 146, 113, 15, 138, 156, 43, 222, 199, 95, 71,
          227, 6, 22, 116, 29, 72, 83, 39, 51, 26, 207, 130, 43, 93, 102, 75, 22, 151, 130, 134, 129, 4, 135, 243, 105,
          177, 145, 149, 36, 198, 87, 218, 203, 6, 15, 244, 245, 212, 224, 46, 239, 161, 29, 206, 244, 32, 59, 58, 201,
          214, 30, 57, 161, 147, 153, 86, 6, 221, 238, 0, 255, 118, 212, 204, 17, 225, 173, 236, 95, 199, 170, 181, 110,
          61, 156, 122, 2, 19, 104, 176, 82, 197, 216, 86, 65, 189, 130, 106, 100, 75, 251, 222, 199, 227, 166, 99, 175,
          219, 8, 162, 197, 143, 64, 206, 38, 227, 96, 204, 99, 185, 49, 70, 78, 127, 211, 86, 219, 239, 205, 80, 77, 7,
          135, 177, 233, 177, 38, 210, 114, 149, 207, 26, 26, 59, 252, 97, 71, 127, 161, 241, 226, 236, 153, 22, 255,
          16, 15, 29, 242, 204, 255, 36, 45, 101, 129, 206, 188, 107, 28, 140, 99, 29, 146, 119, 16, 249, 209, 178, 156,
          28, 241, 184, 235, 97, 222, 244, 208, 109, 230, 161, 135, 82, 203, 14, 127, 105, 97, 140, 208, 170, 20, 19,
          37, 247, 42, 88, 203, 191, 163, 146, 93, 42, 56, 118, 101, 102, 140, 186, 224, 137, 32, 10, 184, 111, 87, 212,
          32, 183, 36, 133, 80, 205, 152, 48, 9, 192, 159, 171, 107, 115, 165, 1, 236, 196, 244, 84, 110, 215, 102, 115,
          186, 34, 182, 95, 156, 186, 13, 235, 204, 133, 89, 158, 227, 192, 166, 239, 148, 123, 153, 193, 86, 194, 199,
          235, 206, 201, 6, 96, 13, 119, 3, 223, 65, 87, 100, 51, 173, 76, 188, 83, 163, 167, 72, 125, 188, 121, 60,
          207, 125, 113, 7, 234, 86, 139, 91, 111, 98, 159, 244, 189, 49, 2, 1, 225, 47, 148, 56, 142, 232, 200, 247,
          106, 6, 104, 133, 164, 214, 214, 148, 126, 174, 82, 39, 228, 125, 69, 217, 189, 137, 7, 115, 170, 234, 162,
          116, 229, 218,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              14, 85, 127, 154, 236, 15, 202, 158, 112, 250, 205, 237, 36, 250, 202, 95, 150, 12, 55, 150, 36, 111, 34,
              158, 42, 244, 101, 254, 248, 84, 84, 130,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              18, 186, 148, 141, 111, 16, 72, 251, 247, 190, 253, 213, 198, 229, 68, 185, 55, 167, 195, 74, 180, 153,
              170, 142, 131, 91, 120, 249, 150, 77, 2, 37,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              165, 165, 237, 99, 209, 17, 138, 148, 41, 180, 167, 179, 228, 250, 156, 76, 63, 19, 104, 4, 200, 101, 194,
              50, 87, 160, 90, 166, 19, 119, 202, 229,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              74, 219, 165, 221, 15, 177, 87, 233, 195, 61, 219, 112, 234, 180, 212, 28, 33, 204, 199, 11, 93, 117, 90,
              11, 20, 155, 148, 251, 37, 115, 170, 175,
            ]),
          },
          {
            h: 4,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              125, 102, 76, 156, 94, 248, 216, 48, 223, 107, 86, 146, 193, 45, 12, 217, 182, 189, 36, 97, 105, 198, 224,
              56, 190, 142, 31, 193, 191, 38, 6, 17,
            ]),
          },
          {
            h: 5,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              182, 47, 232, 123, 241, 23, 108, 174, 170, 229, 179, 7, 20, 136, 82, 19, 198, 20, 56, 10, 219, 212, 175,
              164, 37, 190, 138, 174, 48, 203, 29, 233,
            ]),
          },
          {
            h: 6,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              216, 3, 117, 250, 163, 244, 38, 233, 195, 137, 195, 79, 253, 216, 106, 241, 44, 68, 93, 33, 108, 157, 246,
              72, 194, 97, 3, 156, 111, 17, 199, 58,
            ]),
          },
          {
            h: 7,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              200, 224, 50, 136, 105, 30, 232, 36, 159, 224, 201, 216, 165, 113, 178, 83, 150, 81, 100, 93, 70, 164,
              226, 118, 41, 4, 90, 104, 229, 84, 235, 82,
            ]),
          },
          {
            h: 8,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              131, 29, 210, 52, 195, 101, 131, 19, 163, 217, 4, 7, 17, 160, 97, 17, 212, 205, 48, 209, 233, 120, 152,
              12, 116, 123, 115, 202, 51, 1, 100, 224,
            ]),
          },
          {
            h: 9,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              53, 73, 146, 210, 134, 46, 33, 117, 62, 202, 61, 136, 137, 110, 33, 192, 28, 1, 167, 250, 131, 37, 78, 89,
              153, 238, 212, 184, 172, 2, 153, 202,
            ]),
          },
        ],
        retain: new Uint8Array([
          251, 64, 34, 233, 66, 23, 138, 134, 102, 201, 225, 216, 251, 19, 167, 160, 171, 146, 178, 80, 174, 82, 119,
          201, 73, 202, 101, 168, 137, 21, 122, 4,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 0, signatureType: 1, height: 12, addrFormatType: 4 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 0,
        height: 12,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });

    it('should generate xmss tree for seed[107, 11 ...]', () => {
      const seed = new Uint8Array([
        107, 11, 136, 223, 17, 9, 167, 8, 52, 13, 70, 183, 52, 6, 148, 158, 39, 230, 155, 20, 240, 188, 38, 162, 174,
        154, 34, 158, 83, 70, 225, 88, 132, 207, 21, 105, 155, 89, 7, 247, 172, 118, 81, 64, 19, 122, 221, 199,
      ]);
      const height = 6;
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const addrFormatType = 3;
      const xmssTree = newXMSSFromSeed(seed, height, hashFunction, addrFormatType);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 6,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 150, 178, 143, 132, 233, 120, 243, 203, 98, 249, 23, 78, 218, 209, 24, 234, 53, 38, 3, 30, 27, 171,
        26, 134, 53, 200, 114, 88, 175, 231, 66, 100, 9, 96, 92, 40, 57, 84, 205, 78, 185, 43, 85, 253, 174, 137, 186,
        199, 217, 245, 98, 202, 182, 118, 180, 117, 131, 113, 79, 68, 105, 81, 247, 28, 220, 7, 173, 40, 156, 155, 94,
        175, 144, 142, 134, 8, 78, 240, 29, 190, 209, 36, 187, 230, 19, 184, 137, 138, 149, 48, 168, 247, 172, 158, 200,
        123, 193, 187, 46, 87, 205, 77, 72, 94, 135, 90, 82, 119, 177, 235, 231, 155, 220, 244, 26, 91, 148, 85, 29,
        152, 164, 247, 193, 251, 224, 250, 68, 19,
      ]);
      const expectedSeed = new Uint8Array([
        107, 11, 136, 223, 17, 9, 167, 8, 52, 13, 70, 183, 52, 6, 148, 158, 39, 230, 155, 20, 240, 188, 38, 162, 174,
        154, 34, 158, 83, 70, 225, 88, 132, 207, 21, 105, 155, 89, 7, 247, 172, 118, 81, 64, 19, 122, 221, 199,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          3, 194, 192, 227, 227, 245, 117, 249, 144, 125, 94, 39, 122, 105, 55, 11, 73, 18, 203, 25, 19, 179, 106, 11,
          60, 157, 30, 149, 171, 143, 101, 114, 111, 59, 56, 182, 172, 65, 238, 199, 83, 197, 38, 104, 20, 80, 73, 44,
          25, 56, 171, 44, 198, 209, 12, 146, 232, 105, 94, 172, 11, 165, 148, 156, 106, 91, 48, 27, 208, 98, 139, 158,
          150, 40, 14, 3, 135, 46, 67, 25, 185, 86, 160, 109, 149, 71, 57, 155, 121, 81, 122, 55, 62, 214, 64, 225, 211,
          222, 171, 111, 139, 107, 117, 72, 115, 214, 138, 25, 97, 41, 105, 21, 184, 221, 91, 210, 184, 27, 158, 177,
          204, 188, 135, 168, 199, 41, 98, 53, 15, 178, 163, 27, 190, 151, 47, 112, 223, 99, 31, 138, 80, 168, 110, 118,
          173, 195, 50, 59, 44, 196, 4, 228, 58, 153, 197, 190, 166, 33, 70, 95, 153, 79, 13, 123, 72, 223, 2, 37, 118,
          179, 180, 115, 85, 210, 33, 80, 119, 11, 25, 250, 251, 5, 242, 116, 247, 84, 93, 236, 61, 250, 92, 192,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              244, 76, 32, 3, 174, 246, 165, 149, 85, 120, 5, 182, 134, 50, 42, 46, 55, 188, 119, 139, 32, 179, 185,
              240, 100, 33, 224, 38, 177, 118, 136, 62,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              37, 203, 68, 106, 249, 9, 162, 244, 140, 119, 60, 6, 53, 121, 174, 225, 75, 209, 199, 176, 78, 140, 55,
              230, 53, 252, 154, 140, 243, 22, 11, 49,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              153, 165, 71, 53, 180, 219, 213, 197, 184, 209, 133, 151, 194, 10, 193, 177, 10, 234, 127, 109, 176, 164,
              71, 71, 129, 1, 81, 64, 48, 61, 60, 211,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              224, 71, 69, 133, 173, 204, 157, 26, 61, 233, 155, 196, 228, 54, 88, 45, 206, 165, 132, 247, 225, 121,
              112, 67, 153, 168, 115, 49, 200, 64, 4, 195,
            ]),
          },
        ],
        retain: new Uint8Array([
          35, 71, 147, 149, 151, 130, 143, 173, 221, 227, 108, 150, 16, 43, 222, 253, 172, 26, 189, 34, 196, 248, 81,
          52, 229, 254, 141, 175, 46, 199, 30, 8,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 1, signatureType: 1, height: 6, addrFormatType: 3 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 1,
        height: 6,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });
  });

  describe('newXMSSFromExtendedSeed', () => {
    it('should generate xmss tree for extendedSeed[214, 194 ...]', () => {
      const extendedSeed = new Uint8Array([
        214, 194, 166, 208, 12, 19, 66, 136, 10, 70, 2, 11, 194, 117, 223, 80, 115, 176, 220, 223, 5, 105, 238, 186,
        102, 21, 34, 20, 242, 103, 8, 210, 212, 21, 85, 234, 167, 59, 19, 225, 9, 17, 49, 51, 0, 158, 70, 214, 108, 85,
        175,
      ]);
      const xmssTree = newXMSSFromExtendedSeed(extendedSeed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 4,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 76, 200, 159, 241, 89, 59, 24, 197, 174, 65, 210, 144, 235, 195, 150, 124, 138, 113, 75, 34, 143,
        30, 141, 35, 142, 22, 247, 240, 38, 10, 111, 175, 75, 10, 150, 235, 154, 111, 135, 53, 166, 223, 200, 146, 170,
        63, 73, 200, 95, 145, 52, 87, 65, 118, 183, 231, 208, 118, 223, 174, 23, 214, 117, 125, 91, 29, 99, 142, 39,
        242, 26, 197, 139, 26, 234, 136, 11, 174, 61, 89, 230, 40, 210, 127, 38, 84, 171, 208, 182, 193, 182, 52, 74,
        225, 50, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedSeed = new Uint8Array([
        208, 12, 19, 66, 136, 10, 70, 2, 11, 194, 117, 223, 80, 115, 176, 220, 223, 5, 105, 238, 186, 102, 21, 34, 20,
        242, 103, 8, 210, 212, 21, 85, 234, 167, 59, 19, 225, 9, 17, 49, 51, 0, 158, 70, 214, 108, 85, 175,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 6, signatureType: 13, height: 4, addrFormatType: 12 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 6,
        height: 4,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });

    it('should generate xmss tree for extendedSeed[184, 179 ...]', () => {
      const extendedSeed = new Uint8Array([
        184, 179, 172, 206, 173, 95, 229, 42, 104, 198, 74, 183, 196, 51, 147, 126, 200, 172, 30, 224, 248, 240, 36,
        250, 252, 58, 45, 66, 252, 41, 126, 29, 58, 90, 176, 180, 147, 126, 198, 154, 6, 130, 232, 28, 62, 24, 43, 50,
        158, 217, 228,
      ]);
      const xmssTree = newXMSSFromExtendedSeed(extendedSeed);
      const expectedXmssParams = {
        wotsParams: {
          len1: 64,
          len2: 3,
          len: 67,
          n: 32,
          w: 16,
          logW: 4,
          keySize: 2144,
        },
        n: 32,
        h: 6,
        k: 2,
      };
      const expectedSk = new Uint8Array([
        0, 0, 0, 0, 171, 188, 99, 188, 157, 216, 137, 54, 83, 153, 230, 71, 16, 220, 222, 55, 49, 208, 81, 194, 210, 3,
        113, 98, 171, 116, 198, 153, 233, 129, 139, 200, 188, 96, 151, 144, 72, 209, 75, 167, 160, 255, 144, 234, 182,
        93, 110, 175, 29, 219, 31, 141, 248, 11, 185, 233, 156, 115, 198, 167, 250, 195, 39, 5, 124, 181, 255, 157, 62,
        40, 32, 194, 40, 252, 181, 40, 170, 152, 83, 106, 16, 192, 251, 238, 74, 211, 167, 179, 37, 196, 118, 9, 175,
        28, 66, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ]);
      const expectedSeed = new Uint8Array([
        206, 173, 95, 229, 42, 104, 198, 74, 183, 196, 51, 147, 126, 200, 172, 30, 224, 248, 240, 36, 250, 252, 58, 45,
        66, 252, 41, 126, 29, 58, 90, 176, 180, 147, 126, 198, 154, 6, 130, 232, 28, 62, 24, 43, 50, 158, 217, 228,
      ]);
      const expectedBdsState = {
        stack: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0,
        ]),
        stackOffset: 0,
        stackLevels: new Uint8Array([0, 0, 0, 0, 0, 0, 0]),
        auth: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0,
        ]),
        keep: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        treeHash: [
          {
            h: 0,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 1,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 2,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
          {
            h: 3,
            nextIdx: 0,
            stackUsage: 0,
            completed: 1,
            node: new Uint8Array([
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]),
          },
        ],
        retain: new Uint8Array([
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
        nextLeaf: 0,
      };
      const expectedDesc = { hashFunction: 8, signatureType: 11, height: 6, addrFormatType: 11 };
      const expectedXmssTree = {
        xmssParams: expectedXmssParams,
        hashFunction: 8,
        height: 6,
        sk: expectedSk,
        seed: expectedSeed,
        bdsState: expectedBdsState,
        desc: expectedDesc,
      };

      expect(xmssTree.xmssParams).to.deep.equal(expectedXmssTree.xmssParams);
      expect(xmssTree.hashFunction).to.deep.equal(expectedXmssTree.hashFunction);
      expect(xmssTree.height).to.deep.equal(expectedXmssTree.height);
      expect(xmssTree.sk).to.deep.equal(expectedXmssTree.sk);
      expect(xmssTree.seed).to.deep.equal(expectedXmssTree.seed);
      expect(xmssTree.bdsState).to.deep.equal(expectedXmssTree.bdsState);
      expect(xmssTree.desc).to.deep.equal(expectedXmssTree.desc);
      expect(xmssTree).to.deep.equal(expectedXmssTree);
    });
  });

  describe('newXMSSFromHeight', () => {
    it('should generate a xmss tree', () => {
      const height = 6;
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const xmssTree = newXMSSFromHeight(height, hashFunction);

      expect(Object.getOwnPropertyNames(xmssTree)).to.deep.equal([
        'xmssParams',
        'hashFunction',
        'height',
        'sk',
        'seed',
        'bdsState',
        'desc',
      ]);
    });

    it('should generate a xmss tree from random seed each time', () => {
      const height = 6;
      const hashFunction = HASH_FUNCTION.SHAKE_256;
      const { seed: randomSeed1 } = newXMSSFromHeight(height, hashFunction);
      const { seed: randomSeed2 } = newXMSSFromHeight(height, hashFunction);

      expect(randomSeed1).not.to.deep.equal(randomSeed2);
    });
  });

  describe('getXMSSAddressFromPK', () => {
    it('should throw an error if QRL descriptor address format type is not SHA_256', () => {
      const ePK = new Uint8Array([
        240, 128, 131, 4, 135, 135, 133, 223, 122, 68, 32, 197, 228, 178, 18, 135, 32, 136, 162, 246, 150, 15, 233, 102,
        45, 199, 126, 40, 75, 204, 85, 209, 127, 50, 81, 8, 248, 48, 90, 124, 46, 157, 183, 28, 90, 137, 75, 93, 89, 29,
        44, 113, 173, 190, 146, 102, 4, 89, 139, 253, 157, 197, 232, 37, 24, 102, 164,
      ]);

      expect(() => getXMSSAddressFromPK(ePK)).to.throw('Address format type not supported');
    });

    it('should generate an address for ePK[222, 0, ...]', () => {
      const ePK = new Uint8Array([
        222, 0, 123, 124, 112, 218, 61, 237, 137, 199, 97, 99, 20, 29, 57, 212, 69, 210, 127, 234, 120, 116, 54, 165, 4,
        214, 159, 56, 7, 55, 69, 133, 80, 162, 9, 175, 17, 70, 178, 160, 181, 183, 33, 131, 161, 243, 191, 126, 28, 199,
        159, 138, 103, 215, 227, 22, 164, 233, 196, 23, 139, 213, 127, 155, 96, 241, 35,
      ]);
      const address = getXMSSAddressFromPK(ePK);
      const expectedAddress = new Uint8Array([
        222, 0, 0, 154, 168, 199, 132, 10, 231, 152, 7, 212, 3, 165, 140, 55, 38, 78, 178, 232,
      ]);

      expect(address).to.deep.equal(expectedAddress);
    });

    it('should generate an address for ePK[186, 0, ...]', () => {
      const ePK = new Uint8Array([
        186, 0, 63, 100, 24, 159, 52, 132, 38, 6, 108, 37, 39, 71, 247, 52, 195, 100, 17, 238, 106, 210, 74, 19, 104,
        10, 174, 129, 14, 103, 175, 39, 169, 50, 149, 10, 118, 176, 22, 44, 48, 128, 160, 185, 3, 25, 149, 182, 222,
        137, 136, 191, 152, 247, 158, 83, 8, 172, 192, 142, 47, 202, 137, 234, 207, 251, 203,
      ]);
      const address = getXMSSAddressFromPK(ePK);
      const expectedAddress = new Uint8Array([
        186, 0, 0, 159, 128, 46, 176, 187, 231, 134, 36, 252, 141, 177, 138, 118, 97, 126, 114, 73,
      ]);

      expect(address).to.deep.equal(expectedAddress);
    });
  });

  describe('newXMSS', () => {
    it('should create a XMSS instance', () => {
      const n = 2;
      const h = 4;
      const w = 6;
      const k = 8;
      const xmssParams = newXMSSParams(n, h, w, k);
      const hashFunction = HASH_FUNCTION.SHAKE_128;
      const height = 10;
      const sk = new Uint8Array([32, 43, 44, 13, 4, 23]);
      const seed = new Uint8Array([
        188, 38, 37, 243, 247, 59, 68, 36, 53, 11, 207, 33, 178, 161, 10, 250, 95, 200, 204, 40, 110, 14, 88, 221, 212,
        183, 109, 91, 139, 242, 140, 80, 67, 219, 47, 111, 131, 171, 29, 159, 98, 252, 171, 152, 245, 229, 78, 69,
      ]);
      const bdsState = newBDSState(height, n, k);
      const signatureType = 3;
      const addrFormatType = 7;
      const desc = newQRLDescriptor(height, hashFunction, signatureType, addrFormatType);
      const qrlDescriptor = newXMSS(xmssParams, hashFunction, height, sk, seed, bdsState, desc);

      expect(Object.getOwnPropertyNames(qrlDescriptor)).to.deep.equal([
        'xmssParams',
        'hashFunction',
        'height',
        'sk',
        'seed',
        'bdsState',
        'desc',
      ]);
    });

    it('TODO: should ensure the class methods are working correctly', () => {});
  });
});
